{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Inject, Output, HostBinding, NgModule } from '@angular/core';\nimport { Subject, debounceTime, takeUntil, switchMap, timer } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\n\nfunction GridsterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction GridsterItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_1_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_3_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_3_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_4_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_4_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_5_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_5_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_6_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_6_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_7_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_7_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_8_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_8_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar GridType;\n\n(function (GridType) {\n  GridType[\"Fit\"] = \"fit\";\n  GridType[\"ScrollVertical\"] = \"scrollVertical\";\n  GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n  GridType[\"Fixed\"] = \"fixed\";\n  GridType[\"VerticalFixed\"] = \"verticalFixed\";\n  GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n})(GridType || (GridType = {}));\n\nvar DisplayGrid;\n\n(function (DisplayGrid) {\n  DisplayGrid[\"Always\"] = \"always\";\n  DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n  DisplayGrid[\"None\"] = \"none\";\n})(DisplayGrid || (DisplayGrid = {}));\n\nvar CompactType;\n\n(function (CompactType) {\n  CompactType[\"None\"] = \"none\";\n  CompactType[\"CompactUp\"] = \"compactUp\";\n  CompactType[\"CompactLeft\"] = \"compactLeft\";\n  CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n  CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n  CompactType[\"CompactRight\"] = \"compactRight\";\n  CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n  CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n  CompactType[\"CompactDown\"] = \"compactDown\";\n  CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n  CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n  CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n  CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n})(CompactType || (CompactType = {}));\n\nvar DirTypes;\n\n(function (DirTypes) {\n  DirTypes[\"LTR\"] = \"ltr\";\n  DirTypes[\"RTL\"] = \"rtl\";\n})(DirTypes || (DirTypes = {}));\n\nclass GridsterCompact {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    this.gridster = null;\n  }\n\n  checkCompact() {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n\n  checkCompactItem(item) {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n\n  checkCompactMovement(direction, delta) {\n    let widgetMoved = false;\n    this.gridster.grid.forEach(widget => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n\n  moveTillCollision(item, direction, delta) {\n    item[direction] += delta;\n\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n\n}\n\nconst GridsterConfigService = {\n  gridType: GridType.Fit,\n  scale: 1,\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  fixedRowHeight: 250,\n  keepFixedHeightInMobile: false,\n  keepFixedWidthInMobile: false,\n  setGridSize: false,\n  compactType: CompactType.None,\n  mobileBreakpoint: 640,\n  useBodyForBreakpoint: false,\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1,\n  maxCols: 100,\n  minRows: 1,\n  maxRows: 100,\n  defaultItemCols: 1,\n  defaultItemRows: 1,\n  maxItemCols: 50,\n  maxItemRows: 50,\n  minItemCols: 1,\n  minItemRows: 1,\n  minItemArea: 1,\n  maxItemArea: 2500,\n  addEmptyRowsCount: 0,\n  rowHeightRatio: 1,\n  margin: 10,\n  outerMargin: true,\n  outerMarginTop: null,\n  outerMarginRight: null,\n  outerMarginBottom: null,\n  outerMarginLeft: null,\n  useTransformPositioning: true,\n  scrollSensitivity: 10,\n  scrollSpeed: 20,\n  initCallback: undefined,\n  destroyCallback: undefined,\n  gridSizeChangedCallback: undefined,\n  itemChangeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  enableEmptyCellContextMenu: false,\n  enableEmptyCellDrop: false,\n  enableEmptyCellDrag: false,\n  enableOccupiedCellDrop: false,\n  emptyCellClickCallback: undefined,\n  emptyCellContextMenuCallback: undefined,\n  emptyCellDropCallback: undefined,\n  emptyCellDragCallback: undefined,\n  emptyCellDragMaxCols: 50,\n  emptyCellDragMaxRows: 50,\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  draggable: {\n    delayStart: 0,\n    enabled: false,\n    ignoreContentClass: 'gridster-item-content',\n    ignoreContent: false,\n    dragHandleClass: 'drag-handler',\n    stop: undefined,\n    start: undefined,\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n\n  },\n  resizable: {\n    delayStart: 0,\n    enabled: false,\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    stop: undefined,\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n\n  },\n  swap: true,\n  swapWhileDragging: false,\n  pushItems: false,\n  disablePushOnDrag: false,\n  disablePushOnResize: false,\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  pushResizeItems: false,\n  displayGrid: DisplayGrid.OnDragAndResize,\n  disableWindowResize: false,\n  disableWarnings: false,\n  scrollToNewItems: false,\n  disableScrollHorizontal: false,\n  disableScrollVertical: false,\n  enableBoundaryControl: false,\n  disableAutoPositionOnConflict: false,\n  dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n\n};\n\nclass GridsterUtils {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static merge(obj1, obj2, properties) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static checkTouchEvent(e) {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster, e) {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster, e) {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n\n    if (target.hasAttribute('class')) {\n      const classnames = target.getAttribute('class').split(' ');\n\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    }\n\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n\n  static checkContentClass(target, current, contentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a, b) {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n}\n\nclass GridsterEmptyCell {\n  constructor(gridster) {\n    this.gridster = gridster;\n\n    this.emptyCellClickCb = e => {\n      if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      const item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellClickCallback) {\n        this.gridster.options.emptyCellClickCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    };\n\n    this.emptyCellContextMenuCb = e => {\n      if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellContextMenuCallback) {\n        this.gridster.options.emptyCellContextMenuCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    };\n\n    this.emptyCellDragDrop = e => {\n      const item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellDropCallback) {\n        this.gridster.options.emptyCellDropCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    };\n\n    this.emptyCellDragOver = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n\n      if (item) {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'move';\n        }\n\n        this.gridster.movingItem = item;\n      } else {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n\n        this.gridster.movingItem = null;\n      }\n\n      this.gridster.previewStyle();\n    };\n\n    this.emptyCellMouseDown = e => {\n      if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      const leftMouseButtonCode = 1;\n\n      if (!item || e.buttons !== leftMouseButtonCode && !(e instanceof TouchEvent)) {\n        return;\n      }\n\n      this.initialItem = item;\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeWindowMousemoveListenerFn = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove);\n        this.removeWindowTouchmoveListenerFn = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove);\n      });\n      this.removeWindowMouseupListenerFn = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp);\n      this.removeWindowTouchendListenerFn = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp);\n    };\n\n    this.emptyCellMouseMove = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n\n      if (!item) {\n        return;\n      }\n\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n    };\n\n    this.emptyCellMouseUp = e => {\n      this.removeWindowMousemoveListenerFn();\n      this.removeWindowTouchmoveListenerFn();\n      this.removeWindowMouseupListenerFn();\n      this.removeWindowTouchendListenerFn();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n\n      if (item) {\n        this.gridster.movingItem = item;\n      }\n\n      if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n        this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n      }\n\n      setTimeout(() => {\n        this.initialItem = null;\n\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n      this.gridster.cdRef.markForCheck();\n    };\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n\n    this.gridster.movingItem = null;\n    this.initialItem = this.gridster = null;\n\n    if (this.removeDocumentDragendListenerFn) {\n      this.removeDocumentDragendListenerFn();\n      this.removeDocumentDragendListenerFn = null;\n    }\n  }\n\n  updateOptions() {\n    if (this.gridster.$options.enableEmptyCellClick && !this.removeEmptyCellClickListenerFn && this.gridster.options.emptyCellClickCallback) {\n      this.removeEmptyCellClickListenerFn = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb);\n      this.removeEmptyCellTouchendListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb);\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.removeEmptyCellClickListenerFn && this.removeEmptyCellTouchendListenerFn) {\n      this.removeEmptyCellClickListenerFn();\n      this.removeEmptyCellTouchendListenerFn();\n      this.removeEmptyCellClickListenerFn = null;\n      this.removeEmptyCellTouchendListenerFn = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.removeEmptyCellContextMenuListenerFn && this.gridster.options.emptyCellContextMenuCallback) {\n      this.removeEmptyCellContextMenuListenerFn = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb);\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.removeEmptyCellContextMenuListenerFn) {\n      this.removeEmptyCellContextMenuListenerFn();\n      this.removeEmptyCellContextMenuListenerFn = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrop && !this.removeEmptyCellDropListenerFn && this.gridster.options.emptyCellDropCallback) {\n      this.removeEmptyCellDropListenerFn = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop);\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeEmptyCellDragoverListenerFn = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver);\n      });\n      this.removeDocumentDragendListenerFn = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.removeEmptyCellDropListenerFn && this.removeEmptyCellDragoverListenerFn && this.removeDocumentDragendListenerFn) {\n      this.removeEmptyCellDropListenerFn();\n      this.removeEmptyCellDragoverListenerFn();\n      this.removeDocumentDragendListenerFn();\n      this.removeEmptyCellDragoverListenerFn = null;\n      this.removeEmptyCellDropListenerFn = null;\n      this.removeDocumentDragendListenerFn = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrag && !this.removeEmptyCellMousedownListenerFn && this.gridster.options.emptyCellDragCallback) {\n      this.removeEmptyCellMousedownListenerFn = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown);\n      this.removeEmptyCellTouchstartListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown);\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.removeEmptyCellMousedownListenerFn && this.removeEmptyCellTouchstartListenerFn) {\n      this.removeEmptyCellMousedownListenerFn();\n      this.removeEmptyCellTouchstartListenerFn();\n      this.removeEmptyCellMousedownListenerFn = null;\n      this.removeEmptyCellTouchstartListenerFn = null;\n    }\n  }\n\n  getPixelsX(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n\n  getPixelsY(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n\n  getValidItemFromEvent(e, oldItem) {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n\n    return item;\n  }\n\n}\n\nclass GridsterRenderer {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    this.gridster = null;\n  }\n\n  updateItem(el, item, renderer) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin + item.rows * this.gridster.$options.fixedRowHeight + 'px');\n      } else {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.curWidth / item.cols + 'px');\n      }\n\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin; // set the cell style\n\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom = null;\n      let marginRight = null;\n\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i) {\n    return Object.assign(Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i)), {\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    });\n  }\n\n  getGridRowStyle(i) {\n    return Object.assign(Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i)), {\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    });\n  }\n\n  getLeftPosition(d) {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)'\n      };\n    } else {\n      return {\n        left: this.getLeftMargin() + dPosition + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d) {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)'\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer, el) {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer, el, x, y) {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n}\n\nclass GridsterPreviewComponent {\n  constructor(el, renderer) {\n    this.renderer = renderer;\n    this.el = el.nativeElement;\n  }\n\n  ngOnInit() {\n    this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  previewStyle(item) {\n    if (item) {\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridRenderer.updateItem(this.el, item, this.renderer);\n    } else {\n      this.renderer.setStyle(this.el, 'display', '');\n    }\n  }\n\n}\n\nGridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) {\n  return new (t || GridsterPreviewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nGridsterPreviewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterPreviewComponent,\n  selectors: [[\"gridster-preview\"]],\n  inputs: {\n    previewStyle$: \"previewStyle$\",\n    gridRenderer: \"gridRenderer\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function GridsterPreviewComponent_Template(rf, ctx) {},\n  styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-preview',\n      template: '',\n      encapsulation: ViewEncapsulation.None,\n      styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    previewStyle$: [{\n      type: Input\n    }],\n    gridRenderer: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GridsterComponent {\n  constructor(el, renderer, cdRef, zone) {\n    this.renderer = renderer;\n    this.cdRef = cdRef;\n    this.zone = zone;\n    this.columns = 0;\n    this.rows = 0;\n    this.gridColumns = [];\n    this.gridRows = [];\n    this.previewStyle$ = new EventEmitter();\n    this.calculateLayout$ = new Subject();\n    this.resize$ = new Subject();\n    this.destroy$ = new Subject();\n\n    this.optionsChanged = () => {\n      this.setOptions();\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.updateOptions();\n      }\n\n      this.calculateLayout();\n    };\n\n    this.onResize = () => {\n      if (this.el.clientWidth) {\n        if (this.options.setGridSize) {\n          // reset width/height so the size is recalculated afterwards\n          this.renderer.setStyle(this.el, 'width', '');\n          this.renderer.setStyle(this.el, 'height', '');\n        }\n\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    };\n\n    this.getNextPossiblePosition = (newItem, startingFrom = {}) => {\n      if (newItem.cols === -1) {\n        newItem.cols = this.$options.defaultItemCols;\n      }\n\n      if (newItem.rows === -1) {\n        newItem.rows = this.$options.defaultItemRows;\n      }\n\n      this.setGridDimensions();\n      let rowsIndex = startingFrom.y || 0;\n      let colsIndex;\n\n      for (; rowsIndex < this.rows; rowsIndex++) {\n        newItem.y = rowsIndex;\n        colsIndex = startingFrom.x || 0;\n\n        for (; colsIndex < this.columns; colsIndex++) {\n          newItem.x = colsIndex;\n\n          if (!this.checkCollision(newItem)) {\n            return true;\n          }\n        }\n      }\n\n      const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n      const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n      const addToRows = this.rows <= this.columns && canAddToRows;\n\n      if (!addToRows && canAddToColumns) {\n        newItem.x = this.columns;\n        newItem.y = 0;\n        return true;\n      } else if (canAddToRows) {\n        newItem.y = this.rows;\n        newItem.x = 0;\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getFirstPossiblePosition = item => {\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem);\n      return tmpItem;\n    };\n\n    this.getLastPossiblePosition = item => {\n      let farthestItem = {\n        y: 0,\n        x: 0\n      };\n      farthestItem = this.grid.reduce((prev, curr) => {\n        const currCoords = {\n          y: curr.$item.y + curr.$item.rows - 1,\n          x: curr.$item.x + curr.$item.cols - 1\n        };\n\n        if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n          return currCoords;\n        } else {\n          return prev;\n        }\n      }, farthestItem);\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem, farthestItem);\n      return tmpItem;\n    };\n\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  } // ------ Function for swapWhileDragging option\n  // identical to checkCollision() except that here we add boundaries.\n\n\n  static checkCollisionTwoItemsForSwaping(item, item2) {\n    // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n    const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n    const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n    const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n    const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n    return item.x + horizontalBoundaryItem1 < item2.x + item2.cols && item.x + item.cols > item2.x + horizontalBoundaryItem2 && item.y + verticalBoundaryItem1 < item2.y + item2.rows && item.y + item.rows > item2.y + verticalBoundaryItem2;\n  }\n\n  checkCollisionTwoItems(item, item2) {\n    const collision = item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n\n    if (!collision) {\n      return false;\n    }\n\n    if (!this.$options.allowMultiLayer) {\n      return true;\n    }\n\n    const defaultLayerIndex = this.$options.defaultLayerIndex;\n    const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n    const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n    return layerIndex === layerIndex2;\n  }\n\n  ngOnInit() {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n\n    this.calculateLayout$.pipe(debounceTime(0), takeUntil(this.destroy$)).subscribe(() => this.calculateLayout());\n    this.resize$.pipe( // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n    // within this time range.\n    switchMap(() => timer(100)), takeUntil(this.destroy$)).subscribe(() => this.resize());\n  }\n\n  ngOnChanges(changes) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged,\n        resize: this.onResize,\n        getNextPossiblePosition: this.getNextPossiblePosition,\n        getFirstPossiblePosition: this.getFirstPossiblePosition,\n        getLastPossiblePosition: this.getLastPossiblePosition,\n        getItemComponent: item => this.getItemComponent(item)\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize() {\n    let height;\n    let width;\n\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions() {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize);\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n\n    this.emptyCell.updateOptions();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.previewStyle$.complete();\n\n    if (this.windowResize) {\n      this.windowResize();\n    }\n\n    if (this.options && this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n\n    if (this.options && this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n\n    this.emptyCell.destroy();\n    this.emptyCell = null;\n    this.compact.destroy();\n    this.compact = null;\n  }\n\n  checkIfToResize() {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n\n    if (verticalScrollPresent) {\n      return false;\n    }\n\n    return !horizontalScrollPresent;\n  }\n\n  checkIfMobile() {\n    if (this.$options.useBodyForBreakpoint) {\n      return this.$options.mobileBreakpoint > document.body.clientWidth;\n    } else {\n      return this.$options.mobileBreakpoint > this.curWidth;\n    }\n  }\n\n  setGridSize() {\n    const el = this.el;\n    let width;\n    let height;\n\n    if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions() {\n    this.setGridSize();\n\n    if (!this.mobile && this.checkIfMobile()) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && !this.checkIfMobile()) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n\n    let rows = this.$options.minRows;\n    let columns = this.$options.minCols;\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    rows += this.$options.addEmptyRowsCount;\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout() {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows * this.$options.rowHeightRatio;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows * this.$options.rowHeightRatio;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n\n    this.gridRenderer.updateGridster();\n\n    if (this.$options.setGridSize) {\n      this.renderer.addClass(this.el, 'gridSize');\n\n      if (!this.mobile) {\n        this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n        this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n      }\n    } else {\n      this.renderer.removeClass(this.el, 'gridSize');\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    this.updateGrid();\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    this.resize$.next();\n  }\n\n  updateGrid() {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n\n    this.setGridDimensions();\n    this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n    this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent) {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn(\"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n\n    this.grid.push(itemComponent);\n    this.calculateLayout$.next();\n  }\n\n  removeItem(itemComponent) {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayout$.next();\n\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item) {\n    let collision = false;\n\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n\n      if (c) {\n        collision = c;\n      }\n    }\n\n    return collision;\n  }\n\n  checkGridCollision(item) {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item) {\n    let widgetsIndex = 0;\n    let widget;\n\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n\n    return false;\n  }\n\n  findItemsWithItem(item) {\n    const a = [];\n    let widgetsIndex = 0;\n    let widget;\n\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n\n    return a;\n  }\n\n  autoPositionItem(itemComponent) {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n\n      if (!this.$options.disableWarnings) {\n        console.warn(\"Can't be placed in the bounds of the dashboard!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  pixelsToPositionX(x, roundingMethod, noLimit) {\n    const position = roundingMethod(x / this.curColWidth);\n\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y, roundingMethod, noLimit) {\n    const position = roundingMethod(y / this.curRowHeight);\n\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x) {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y) {\n    return y * this.curRowHeight;\n  }\n\n  getItemComponent(item) {\n    return this.grid.find(c => c.item === item);\n  } // ------ Functions for swapWhileDragging option\n  // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n\n\n  checkCollisionForSwaping(item) {\n    let collision = false;\n\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n\n    if (!collision) {\n      const c = this.findItemWithItemForSwapping(item);\n\n      if (c) {\n        collision = c;\n      }\n    }\n\n    return collision;\n  } // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n\n\n  findItemWithItemForSwapping(item) {\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n        return widget;\n      }\n    }\n\n    return false;\n  }\n\n  previewStyle(drag = false) {\n    if (this.movingItem) {\n      if (this.compact && drag) {\n        this.compact.checkCompactItem(this.movingItem);\n      }\n\n      this.previewStyle$.next(this.movingItem);\n    } else {\n      this.previewStyle$.next(null);\n    }\n  } // ------ End of functions for swapWhileDragging option\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  static getNewArrayLength(length, overallSize, size) {\n    const newLength = Math.max(length, Math.floor(overallSize / size));\n\n    if (newLength < 0) {\n      return 0;\n    }\n\n    if (Number.isFinite(newLength)) {\n      return Math.floor(newLength);\n    }\n\n    return 0;\n  }\n\n}\n\nGridsterComponent.ɵfac = function GridsterComponent_Factory(t) {\n  return new (t || GridsterComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(NgZone));\n};\n\nGridsterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterComponent,\n  selectors: [[\"gridster\"]],\n  inputs: {\n    options: \"options\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\", 3, \"gridRenderer\", \"previewStyle$\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n  template: function GridsterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n      i0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelement(3, \"gridster-preview\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"gridRenderer\", ctx.gridRenderer)(\"previewStyle$\", ctx.previewStyle$);\n    }\n  },\n  directives: [GridsterPreviewComponent, i2.NgForOf, i2.NgStyle],\n  styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\",\n      styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef,\n      decorators: [{\n        type: Inject,\n        args: [ChangeDetectorRef]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }];\n  }, {\n    options: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GridsterPush {\n  constructor(gridsterItem) {\n    this.iteration = 0;\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n\n  pushItems(direction, disable) {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems() {\n    let i = this.pushedItemsTemp.length - 1;\n\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n\n    if (direction === '') {\n      return false;\n    }\n\n    const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest; // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n    });\n    let i = 0;\n    let itemCollision;\n    let makePush = true;\n    const pushedItems = [];\n\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n        // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n\n    this.iteration++;\n    return makePush;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  addToTempPushed(gridsterItem) {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n\n    this.pushedItemsTempPath[i].push({\n      x: gridsterItem.$item.x,\n      y: gridsterItem.$item.y\n    });\n  }\n\n  removeFromTempPushed(gridsterItem) {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n\n    if (!tempPosition) {\n      return;\n    }\n\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  removeFromPushedItem(gridsterItem) {\n    const i = this.pushedItems.indexOf(gridsterItem);\n\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n\n    return change;\n  }\n\n}\n\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\n\nfunction scroll(gridster, left, top, width, height, event, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  const {\n    clientX,\n    clientY\n  } = event;\n\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.south || intervalS) {\n        return;\n      }\n\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.north || intervalN) {\n        return;\n      }\n\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== clientY) {\n      cancelVertical();\n    }\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.east || intervalE) {\n        return;\n      }\n\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.west || intervalW) {\n        return;\n      }\n\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== clientX) {\n      cancelHorizontal();\n    }\n  }\n}\n\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  let clientY = lastMouse.clientY;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY\n    });\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  let clientX = lastMouse.clientX;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\n\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n\nclass GridsterSwap {\n  constructor(gridsterItem) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy() {\n    this.gridster = this.gridsterItem = this.swapedItem = null;\n  }\n\n  swapItems() {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack() {\n    if (this.swapedItem) {\n      const x = this.swapedItem.$item.x;\n      const y = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n    }\n  }\n\n  restoreSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy) {\n    let gridsterItemCollision;\n\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n\n}\n\nconst GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS = 'gridster-item-resizable-handler';\nvar Direction;\n\n(function (Direction) {\n  Direction[\"UP\"] = \"UP\";\n  Direction[\"DOWN\"] = \"DOWN\";\n  Direction[\"LEFT\"] = \"LEFT\";\n  Direction[\"RIGHT\"] = \"RIGHT\";\n})(Direction || (Direction = {}));\n\nclass GridsterDraggable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.collision = false;\n\n    this.dragMove = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e); // get the directions of the mouse event\n\n      let directions = this.getDirections(e);\n\n      if (this.gridster.options.enableBoundaryControl) {\n        // prevent moving up at the top of gridster\n        if (directions.includes(Direction.UP) && this.gridsterItem.el.getBoundingClientRect().top <= this.gridster.el.getBoundingClientRect().top + this.margin) {\n          directions = directions.filter(direction => direction != Direction.UP);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        } // prevent moving left at the leftmost column of gridster\n\n\n        if (directions.includes(Direction.LEFT) && this.gridsterItem.el.getBoundingClientRect().left <= this.gridster.el.getBoundingClientRect().left + this.margin) {\n          directions = directions.filter(direction => direction != Direction.LEFT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        } // prevent moving right at the rightmost column of gridster\n\n\n        if (directions.includes(Direction.RIGHT) && this.gridsterItem.el.getBoundingClientRect().right >= this.gridster.el.getBoundingClientRect().right - this.margin) {\n          directions = directions.filter(direction => direction != Direction.RIGHT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        } // prevent moving down at the bottom of gridster\n\n\n        if (directions.includes(Direction.DOWN) && this.gridsterItem.el.getBoundingClientRect().bottom >= this.gridster.el.getBoundingClientRect().bottom - this.margin) {\n          directions = directions.filter(direction => direction != Direction.DOWN);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        }\n      } // do not change item location when there is no direction to go\n\n\n      if (directions.length) {\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition);\n        this.calculateItemPositionFromMousePosition(e);\n      }\n    };\n\n    this.calculateItemPositionFromMousePosition = e => {\n      if (this.gridster.options.scale) {\n        this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n      } else {\n        this.calculateItemPositionWithoutScale(e);\n      }\n\n      this.calculateItemPosition();\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.cancelOnBlur();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      this.path = [];\n\n      if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n        Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag, this.cancelDrag);\n      } else {\n        this.makeDrag();\n      }\n\n      setTimeout(() => {\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle(true);\n        }\n      });\n    };\n\n    this.cancelDrag = () => {\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n\n      if (this.push) {\n        this.push.restoreItems();\n      }\n\n      if (this.swap) {\n        this.swap.restoreSwapItem();\n      }\n\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n\n    this.makeDrag = () => {\n      if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n        this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n      }\n\n      this.collision = false;\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n\n      if (this.push) {\n        this.push.setPushedItems();\n      }\n\n      if (this.swap) {\n        this.swap.setSwapItem();\n      }\n\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n\n    this.dragStartDelay = e => {\n      const target = e.target;\n\n      if (target.classList.contains(GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS)) {\n        return;\n      }\n\n      if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n        return;\n      }\n\n      GridsterUtils.checkTouchEvent(e);\n\n      if (!this.gridster.$options.draggable.delayStart) {\n        this.dragStart(e);\n        return;\n      }\n\n      const timeout = setTimeout(() => {\n        this.dragStart(e);\n        cancelDrag();\n      }, this.gridster.$options.draggable.delayStart);\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n      function cancelMove(eventMove) {\n        GridsterUtils.checkTouchEvent(eventMove);\n\n        if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n          cancelDrag();\n        }\n      }\n\n      function cancelDrag() {\n        clearTimeout(timeout);\n        cancelOnBlur();\n        cancelMouse();\n        cancelMouseLeave();\n        cancelTouchMove();\n        cancelTouchEnd();\n        cancelTouchCancel();\n      }\n    };\n\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n\n    this.gridsterItem = this.gridster = this.collision = null;\n\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({\n      x: this.gridsterItem.item.x || 0,\n      y: this.gridsterItem.item.y || 0\n    });\n  }\n\n  calculateItemPositionWithScale(e, scale) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + (e.clientX - this.originalClientX) / scale + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + (e.clientX - this.originalClientX) / scale + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = this.originalClientY + (e.clientY - this.originalClientY) / scale + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPositionWithoutScale(e) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n\n    this.gridsterItem.$item.y = this.positionY;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({\n          x: this.gridsterItem.$item.x,\n          y: this.gridsterItem.$item.y\n        });\n      }\n\n      this.push.checkPushBack();\n    }\n\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartDelay);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartDelay);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n  /**\r\n   * Returns the list of directions for given mouse event\r\n   * @param e Mouse event\r\n   * */\n\n\n  getDirections(e) {\n    const directions = [];\n\n    if (this.lastMouse.clientY > e.clientY) {\n      directions.push(Direction.UP);\n    }\n\n    if (this.lastMouse.clientY < e.clientY) {\n      directions.push(Direction.DOWN);\n    }\n\n    if (this.lastMouse.clientX < e.clientX) {\n      directions.push(Direction.RIGHT);\n    }\n\n    if (this.lastMouse.clientX > e.clientX) {\n      directions.push(Direction.LEFT);\n    }\n\n    return directions;\n  }\n\n}\n\nclass GridsterPushResize {\n  constructor(gridsterItem) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n\n  pushItems(direction) {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n\n    return false;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem, direction) {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem, direction) {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0,\n        cols: gridsterItem.item.cols || 0,\n        rows: gridsterItem.item.rows || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let cols;\n    let rows;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass GridsterResizable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    /**\r\n     * The direction function may reference any of the `GridsterResizable` class methods, that are\r\n     * responsible for gridster resize when the `dragmove` event is being handled. E.g. it may reference\r\n     * the `handleNorth` method when the north handle is pressed and moved by a mouse.\r\n     */\n\n    this.directionFunction = null;\n\n    this.dragMove = e => {\n      if (this.directionFunction === null) {\n        throw new Error('The `directionFunction` has not been set before calling `dragMove`.');\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction, true, this.resizeEventScrollType);\n      const scale = this.gridster.options.scale || 1;\n      this.directionFunction({\n        clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n        clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n      });\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.cancelOnBlur();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n\n      if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n        Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize, this.cancelResize);\n      } else {\n        this.makeResize();\n      }\n\n      setTimeout(() => {\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n    };\n\n    this.cancelResize = () => {\n      this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n      this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      this.push.restoreItems();\n      this.pushResize.restoreItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n\n    this.makeResize = () => {\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      this.push.setPushedItems();\n      this.pushResize.setPushedItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n\n    this.handleNorth = e => {\n      this.top = e.clientY + this.offsetTop - this.diffTop;\n      this.height = this.bottom - this.top;\n\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n        this.top = this.bottom - this.minHeight;\n      }\n\n      this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n\n      if (this.gridsterItem.$item.y !== this.newPosition) {\n        this.itemBackup[1] = this.gridsterItem.$item.y;\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n        this.gridsterItem.$item.y = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromSouth);\n        this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.y = this.itemBackup[1];\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemTop(this.top);\n      this.setItemHeight(this.height);\n    };\n\n    this.handleWest = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.left = clientX + this.offsetLeft - this.diffLeft;\n      this.width = this.right - this.left;\n\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n        this.left = this.right - this.minWidth;\n      }\n\n      this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n\n      if (this.gridsterItem.$item.x !== this.newPosition) {\n        this.itemBackup[0] = this.gridsterItem.$item.x;\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n        this.gridsterItem.$item.x = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromEast);\n        this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.x = this.itemBackup[0];\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemLeft(this.left);\n      this.setItemWidth(this.width);\n    };\n\n    this.handleSouth = e => {\n      this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n      }\n\n      this.bottom = this.top + this.height;\n      this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n\n      if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n        this.pushResize.pushItems(this.pushResize.fromNorth);\n        this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemHeight(this.height);\n    };\n\n    this.handleEast = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n      }\n\n      this.right = this.left + this.width;\n      this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n\n      if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n        this.pushResize.pushItems(this.pushResize.fromWest);\n        this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemWidth(this.width);\n    };\n\n    this.handleNorthWest = e => {\n      this.handleNorth(e);\n      this.handleWest(e);\n    };\n\n    this.handleNorthEast = e => {\n      this.handleNorth(e);\n      this.handleEast(e);\n    };\n\n    this.handleSouthWest = e => {\n      this.handleSouth(e);\n      this.handleWest(e);\n    };\n\n    this.handleSouthEast = e => {\n      this.handleSouth(e);\n      this.handleEast(e);\n    };\n\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      west: false,\n      east: false,\n      north: false,\n      south: false\n    };\n  }\n\n  destroy() {\n    var _a;\n\n    (_a = this.gridster) === null || _a === void 0 ? void 0 : _a.previewStyle();\n    this.gridster = this.gridsterItem = null;\n  }\n\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    const {\n      classList\n    } = e.target;\n\n    if (classList.contains('handle-n')) {\n      this.resizeEventScrollType.north = true;\n      this.directionFunction = this.handleNorth;\n    } else if (classList.contains('handle-w')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      } else {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      }\n    } else if (classList.contains('handle-s')) {\n      this.resizeEventScrollType.south = true;\n      this.directionFunction = this.handleSouth;\n    } else if (classList.contains('handle-e')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      } else {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      }\n    } else if (classList.contains('handle-nw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      }\n    } else if (classList.contains('handle-ne')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      }\n    } else if (classList.contains('handle-sw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      }\n    } else if (classList.contains('handle-se')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      }\n    }\n  }\n\n  toggle() {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e) {\n    GridsterUtils.checkTouchEvent(e);\n\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const {\n      cancelMouse,\n      cancelMouseLeave,\n      cancelOnBlur,\n      cancelTouchMove,\n      cancelTouchEnd,\n      cancelTouchCancel\n    } = this.zone.runOutsideAngular(() => {\n      // Note: all of these events are being added within the `<root>` zone since they all\n      // don't do any view updates and don't require Angular running change detection.\n      // All event listeners call `cancelDrag` once the event is dispatched, the `cancelDrag`\n      // is responsible only for removing event listeners.\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      return {\n        cancelMouse,\n        cancelMouseLeave,\n        cancelOnBlur,\n        cancelTouchMove,\n        cancelTouchEnd,\n        cancelTouchCancel\n      };\n    });\n\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n\n}\n\nclass GridsterItemComponent {\n  constructor(el, gridster, renderer, zone) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.itemInit = new EventEmitter();\n    this.itemChange = new EventEmitter();\n    this.itemResize = new EventEmitter();\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  get zIndex() {\n    return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n  }\n\n  ngOnInit() {\n    this.gridster.addItem(this);\n  }\n\n  ngOnChanges(changes) {\n    if (changes.item) {\n      this.updateOptions();\n\n      if (!this.init) {\n        this.gridster.calculateLayout$.next();\n      }\n    }\n\n    if (changes.item && changes.item.previousValue) {\n      this.setSize();\n    }\n  }\n\n  updateOptions() {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      layerIndex: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined\n    });\n  }\n\n  ngOnDestroy() {\n    this.gridster.removeItem(this);\n    this.drag.destroy();\n    this.resize.destroy();\n    this.gridster = this.drag = this.resize = null;\n  }\n\n  setSize() {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n    this.top = top;\n    this.left = left;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n\n      this.itemInit.next({\n        item: this.item,\n        itemComponent: this\n      });\n\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n\n      this.itemResize.next({\n        item: this.item,\n        itemComponent: this\n      });\n    }\n  }\n\n  itemChanged() {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n\n    this.itemChange.next({\n      item: this.item,\n      itemComponent: this\n    });\n  }\n\n  checkItemChanges(newValue, oldValue) {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayout$.next();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged() {\n    const gridDragEnabled = this.gridster.$options.draggable.enabled;\n    const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\n    return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n  }\n\n  canBeResized() {\n    const gridResizable = this.gridster.$options.resizable.enabled;\n    const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\n    return !this.gridster.mobile && gridResizable && itemResizable;\n  }\n\n  bringToFront(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n\n    const layerIndex = this.getLayerIndex();\n    const topIndex = this.gridster.$options.maxLayerIndex;\n\n    if (layerIndex < topIndex) {\n      const targetIndex = offset ? layerIndex + offset : topIndex;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n    }\n  }\n\n  sendToBack(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n\n    const layerIndex = this.getLayerIndex();\n\n    if (layerIndex > 0) {\n      const targetIndex = offset ? layerIndex - offset : 0;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n    }\n  }\n\n  getLayerIndex() {\n    if (this.item.layerIndex !== undefined) {\n      return this.item.layerIndex;\n    }\n\n    if (this.gridster.$options.defaultLayerIndex !== undefined) {\n      return this.gridster.$options.defaultLayerIndex;\n    }\n\n    return 0;\n  }\n\n}\n\nGridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) {\n  return new (t || GridsterItemComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(GridsterComponent), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone));\n};\n\nGridsterItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterItemComponent,\n  selectors: [[\"gridster-item\"]],\n  hostVars: 2,\n  hostBindings: function GridsterItemComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n    }\n  },\n  inputs: {\n    item: \"item\"\n  },\n  outputs: {\n    itemInit: \"itemInit\",\n    itemChange: \"itemChange\",\n    itemResize: \"itemResize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 9,\n  vars: 8,\n  consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]],\n  template: function GridsterItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵtemplate(1, GridsterItemComponent_div_1_Template, 1, 0, \"div\", 0);\n      i0.ɵɵtemplate(2, GridsterItemComponent_div_2_Template, 1, 0, \"div\", 1);\n      i0.ɵɵtemplate(3, GridsterItemComponent_div_3_Template, 1, 0, \"div\", 2);\n      i0.ɵɵtemplate(4, GridsterItemComponent_div_4_Template, 1, 0, \"div\", 3);\n      i0.ɵɵtemplate(5, GridsterItemComponent_div_5_Template, 1, 0, \"div\", 4);\n      i0.ɵɵtemplate(6, GridsterItemComponent_div_6_Template, 1, 0, \"div\", 5);\n      i0.ɵɵtemplate(7, GridsterItemComponent_div_7_Template, 1, 0, \"div\", 6);\n      i0.ɵɵtemplate(8, GridsterItemComponent_div_8_Template, 1, 0, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.s && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.e && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.n && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.w && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.se && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.ne && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.sw && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.nw && ctx.resize.resizeEnabled);\n    }\n  },\n  directives: [i2.NgIf],\n  styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-item',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\",\n      styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: GridsterComponent\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }];\n  }, {\n    item: [{\n      type: Input\n    }],\n    itemInit: [{\n      type: Output\n    }],\n    itemChange: [{\n      type: Output\n    }],\n    itemResize: [{\n      type: Output\n    }],\n    zIndex: [{\n      type: HostBinding,\n      args: ['style.z-index']\n    }]\n  });\n})();\n\nclass GridsterItemComponentInterface {}\n\nclass GridsterComponentInterface {}\n\nclass GridsterModule {}\n\nGridsterModule.ɵfac = function GridsterModule_Factory(t) {\n  return new (t || GridsterModule)();\n};\n\nGridsterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GridsterModule\n});\nGridsterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GridsterComponent, GridsterItemComponent, GridsterPreviewComponent],\n      imports: [CommonModule],\n      exports: [GridsterComponent, GridsterItemComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of gridster\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };","map":{"version":3,"sources":["E:/CMKPCBK/ドキュメント/プログラミング学習/Angular/angular-gridster2/angular-gridster2/node_modules/angular-gridster2/fesm2015/angular-gridster2.mjs"],"names":["i0","Component","ViewEncapsulation","Input","EventEmitter","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Inject","Output","HostBinding","NgModule","Subject","debounceTime","takeUntil","switchMap","timer","i2","CommonModule","GridType","DisplayGrid","CompactType","DirTypes","GridsterCompact","constructor","gridster","destroy","checkCompact","$options","compactType","None","CompactUp","checkCompactMovement","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","CompactUpAndRight","CompactRightAndUp","CompactDown","CompactDownAndLeft","CompactDownAndRight","CompactLeftAndDown","CompactRightAndDown","checkCompactItem","item","moveTillCollision","direction","delta","widgetMoved","grid","forEach","widget","$item","compactEnabled","moved","itemChanged","checkCollision","GridsterConfigService","gridType","Fit","scale","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","mobileBreakpoint","useBodyForBreakpoint","allowMultiLayer","defaultLayerIndex","maxLayerIndex","baseLayerIndex","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","addEmptyRowsCount","rowHeightRatio","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","enableOccupiedCellDrop","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableScrollHorizontal","disableScrollVertical","enableBoundaryControl","disableAutoPositionOnConflict","dirType","LTR","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","checkDragHandleClass","target","currentTarget","checkContentClass","checkContentClassForEmptyCellClickEvent","current","hasAttribute","classnames","getAttribute","split","indexOf","parentNode","contentClass","compareItems","a","b","y","x","GridsterEmptyCell","emptyCellClickCb","movingItem","getValidItemFromEvent","options","cdRef","markForCheck","emptyCellContextMenuCb","preventDefault","stopPropagation","emptyCellDragDrop","emptyCellDragOver","dataTransfer","dropEffect","previewStyle","emptyCellMouseDown","leftMouseButtonCode","buttons","TouchEvent","initialItem","zone","runOutsideAngular","removeWindowMousemoveListenerFn","renderer","listen","emptyCellMouseMove","removeWindowTouchmoveListenerFn","removeWindowMouseupListenerFn","emptyCellMouseUp","removeWindowTouchendListenerFn","setTimeout","removeDocumentDragendListenerFn","updateOptions","removeEmptyCellClickListenerFn","el","removeEmptyCellTouchendListenerFn","removeEmptyCellContextMenuListenerFn","removeEmptyCellDropListenerFn","removeEmptyCellDragoverListenerFn","removeEmptyCellMousedownListenerFn","removeEmptyCellTouchstartListenerFn","getPixelsX","rect","left","scrollLeft","gridRenderer","getLeftMargin","getPixelsY","top","scrollTop","getTopMargin","oldItem","getBoundingClientRect","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","GridsterRenderer","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","widthRatio","calWidthRatio","VerticalFixed","HorizontalFixed","removeClass","getGridColumnStyle","i","Object","assign","getLeftPosition","gridRows","getGridRowStyle","getTopPosition","gridColumns","d","dPosition","RTL","transform","xPosition","GridsterPreviewComponent","nativeElement","ngOnInit","sub","previewStyle$","subscribe","ngOnDestroy","unsubscribe","ɵfac","ɵcmp","type","args","selector","template","encapsulation","styles","GridsterComponent","calculateLayout$","resize$","destroy$","optionsChanged","setOptions","widgetsIndex","calculateLayout","onResize","clientWidth","getNextPossiblePosition","newItem","startingFrom","setGridDimensions","rowsIndex","colsIndex","canAddToRows","canAddToColumns","addToRows","getFirstPossiblePosition","tmpItem","getLastPossiblePosition","farthestItem","reduce","prev","curr","currCoords","JSON","parse","stringify","curHeight","dragInProgress","emptyCell","compact","checkCollisionTwoItemsForSwaping","item2","horizontalBoundaryItem1","horizontalBoundaryItem2","verticalBoundaryItem1","verticalBoundaryItem2","checkCollisionTwoItems","collision","layerIndex","layerIndex2","pipe","resize","ngOnChanges","changes","api","getItemComponent","offsetWidth","offsetHeight","clientHeight","checkIfToResize","windowResize","next","complete","scrollWidth","scrollHeight","verticalScrollPresent","horizontalScrollPresent","checkIfMobile","document","body","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","getNewArrayLength","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","inMinArea","inMaxArea","findItemsWithItem","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","find","checkCollisionForSwaping","findItemWithItemForSwapping","overallSize","size","newLength","Number","isFinite","NgForOf","NgStyle","decorators","GridsterPush","gridsterItem","iteration","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","l","pushedItem","setPushedItems","checkItemChanges","checkPushBack","change","checkPushedItem","conflicts","invert","sort","itemCollision","makePush","canBeDragged","call","lastIndexOf","j","pop","removeFromPushedItem","gridsterItemCollide","addToTempPushed","addToPushed","tempPosition","removeFromPushed","path","lastPosition","intervalDuration","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","scroll","event","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","window","setInterval","cancelScroll","clearInterval","GridsterSwap","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","pushedBy","gridsterItemCollision","copyCollisionX","copyCollisionY","copyX","copyY","diffX","diffY","GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS","Direction","GridsterDraggable","dragMove","directions","getDirections","includes","UP","filter","MouseEvent","LEFT","RIGHT","right","DOWN","bottom","calculateItemPositionFromMousePosition","calculateItemPositionWithScale","calculateItemPositionWithoutScale","run","dragStop","cancelOnBlur","mousemove","mouseup","mouseleave","touchmove","touchend","touchcancel","Promise","resolve","then","makeDrag","cancelDrag","dragStartDelay","classList","contains","dragStart","timeout","cancelMouse","cancelMouseLeave","cancelTouchMove","cancelMove","cancelTouchEnd","cancelTouchCancel","eventMove","clearTimeout","mousedown","touchstart","which","originalClientX","originalClientY","diffLeft","diffTop","positionX","positionY","positionXBackup","positionYBackup","enableDrag","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","directionFunction","Error","makeResize","cancelResize","pushResize","handleNorth","minHeight","newPosition","itemBackup","setItemTop","setItemHeight","handleWest","minWidth","setItemLeft","setItemWidth","handleSouth","diffBottom","ceil","handleEast","diffRight","handleNorthWest","handleNorthEast","handleSouthWest","handleSouthEast","_a","resizeEnabled","GridsterItemComponent","itemInit","itemChange","itemResize","zIndex","getLayerIndex","init","previousValue","dragEnabled","updateItemSize","scrollIntoView","newValue","oldValue","gridDragEnabled","itemDragEnabled","gridResizable","itemResizable","bringToFront","offset","topIndex","targetIndex","sendToBack","NgIf","GridsterItemComponentInterface","GridsterComponentInterface","GridsterModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Inject, Output, HostBinding, NgModule } from '@angular/core';\nimport { Subject, debounceTime, takeUntil, switchMap, timer } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nvar GridType;\r\n(function (GridType) {\r\n    GridType[\"Fit\"] = \"fit\";\r\n    GridType[\"ScrollVertical\"] = \"scrollVertical\";\r\n    GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\r\n    GridType[\"Fixed\"] = \"fixed\";\r\n    GridType[\"VerticalFixed\"] = \"verticalFixed\";\r\n    GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\r\n})(GridType || (GridType = {}));\r\nvar DisplayGrid;\r\n(function (DisplayGrid) {\r\n    DisplayGrid[\"Always\"] = \"always\";\r\n    DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\r\n    DisplayGrid[\"None\"] = \"none\";\r\n})(DisplayGrid || (DisplayGrid = {}));\r\nvar CompactType;\r\n(function (CompactType) {\r\n    CompactType[\"None\"] = \"none\";\r\n    CompactType[\"CompactUp\"] = \"compactUp\";\r\n    CompactType[\"CompactLeft\"] = \"compactLeft\";\r\n    CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\r\n    CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\r\n    CompactType[\"CompactRight\"] = \"compactRight\";\r\n    CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\r\n    CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\r\n    CompactType[\"CompactDown\"] = \"compactDown\";\r\n    CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\r\n    CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\r\n    CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\r\n    CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\r\n})(CompactType || (CompactType = {}));\r\nvar DirTypes;\r\n(function (DirTypes) {\r\n    DirTypes[\"LTR\"] = \"ltr\";\r\n    DirTypes[\"RTL\"] = \"rtl\";\r\n})(DirTypes || (DirTypes = {}));\n\nclass GridsterCompact {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    destroy() {\r\n        this.gridster = null;\r\n    }\r\n    checkCompact() {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.checkCompactMovement('y', -1);\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.checkCompactMovement('x', -1);\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRight) {\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\r\n                this.checkCompactMovement('y', -1);\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\r\n                this.checkCompactMovement('x', 1);\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\r\n                this.checkCompactMovement('y', 1);\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\r\n                this.checkCompactMovement('y', 1);\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\r\n                this.checkCompactMovement('x', -1);\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\r\n                this.checkCompactMovement('x', 1);\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n        }\r\n    }\r\n    checkCompactItem(item) {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n                this.moveTillCollision(item, 'y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n                this.moveTillCollision(item, 'x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n                this.moveTillCollision(item, 'x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\r\n                this.moveTillCollision(item, 'x', 1);\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n        }\r\n    }\r\n    checkCompactMovement(direction, delta) {\r\n        let widgetMoved = false;\r\n        this.gridster.grid.forEach((widget) => {\r\n            if (widget.$item.compactEnabled !== false) {\r\n                const moved = this.moveTillCollision(widget.$item, direction, delta);\r\n                if (moved) {\r\n                    widgetMoved = true;\r\n                    widget.item[direction] = widget.$item[direction];\r\n                    widget.itemChanged();\r\n                }\r\n            }\r\n        });\r\n        if (widgetMoved) {\r\n            this.checkCompact();\r\n        }\r\n    }\r\n    moveTillCollision(item, direction, delta) {\r\n        item[direction] += delta;\r\n        if (this.gridster.checkCollision(item)) {\r\n            item[direction] -= delta;\r\n            return false;\r\n        }\r\n        else {\r\n            this.moveTillCollision(item, direction, delta);\r\n            return true;\r\n        }\r\n    }\r\n}\n\nconst GridsterConfigService = {\r\n    gridType: GridType.Fit,\r\n    scale: 1,\r\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\r\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\r\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\r\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\r\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\r\n    fixedColWidth: 250,\r\n    fixedRowHeight: 250,\r\n    keepFixedHeightInMobile: false,\r\n    keepFixedWidthInMobile: false,\r\n    setGridSize: false,\r\n    compactType: CompactType.None,\r\n    mobileBreakpoint: 640,\r\n    useBodyForBreakpoint: false,\r\n    allowMultiLayer: false,\r\n    defaultLayerIndex: 0,\r\n    maxLayerIndex: 2,\r\n    baseLayerIndex: 1,\r\n    minCols: 1,\r\n    maxCols: 100,\r\n    minRows: 1,\r\n    maxRows: 100,\r\n    defaultItemCols: 1,\r\n    defaultItemRows: 1,\r\n    maxItemCols: 50,\r\n    maxItemRows: 50,\r\n    minItemCols: 1,\r\n    minItemRows: 1,\r\n    minItemArea: 1,\r\n    maxItemArea: 2500,\r\n    addEmptyRowsCount: 0,\r\n    rowHeightRatio: 1,\r\n    margin: 10,\r\n    outerMargin: true,\r\n    outerMarginTop: null,\r\n    outerMarginRight: null,\r\n    outerMarginBottom: null,\r\n    outerMarginLeft: null,\r\n    useTransformPositioning: true,\r\n    scrollSensitivity: 10,\r\n    scrollSpeed: 20,\r\n    initCallback: undefined,\r\n    destroyCallback: undefined,\r\n    gridSizeChangedCallback: undefined,\r\n    itemChangeCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemResizeCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemInitCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemRemovedCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemValidateCallback: undefined,\r\n    // Arguments: gridsterItem\r\n    enableEmptyCellClick: false,\r\n    enableEmptyCellContextMenu: false,\r\n    enableEmptyCellDrop: false,\r\n    enableEmptyCellDrag: false,\r\n    enableOccupiedCellDrop: false,\r\n    emptyCellClickCallback: undefined,\r\n    emptyCellContextMenuCallback: undefined,\r\n    emptyCellDropCallback: undefined,\r\n    emptyCellDragCallback: undefined,\r\n    emptyCellDragMaxCols: 50,\r\n    emptyCellDragMaxRows: 50,\r\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\r\n    ignoreMarginInRow: false,\r\n    draggable: {\r\n        delayStart: 0,\r\n        enabled: false,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        stop: undefined,\r\n        start: undefined,\r\n        // Arguments: item, gridsterItem, event\r\n        dropOverItems: false,\r\n        dropOverItemsCallback: undefined // callback on drop over another item\r\n        // Arguments: source, target, gridComponent\r\n    },\r\n    resizable: {\r\n        delayStart: 0,\r\n        enabled: false,\r\n        handles: {\r\n            s: true,\r\n            e: true,\r\n            n: true,\r\n            w: true,\r\n            se: true,\r\n            ne: true,\r\n            sw: true,\r\n            nw: true\r\n        },\r\n        stop: undefined,\r\n        start: undefined // callback when resizing an item starts.\r\n        // Arguments: item, gridsterItem, event\r\n    },\r\n    swap: true,\r\n    swapWhileDragging: false,\r\n    pushItems: false,\r\n    disablePushOnDrag: false,\r\n    disablePushOnResize: false,\r\n    pushDirections: { north: true, east: true, south: true, west: true },\r\n    pushResizeItems: false,\r\n    displayGrid: DisplayGrid.OnDragAndResize,\r\n    disableWindowResize: false,\r\n    disableWarnings: false,\r\n    scrollToNewItems: false,\r\n    disableScrollHorizontal: false,\r\n    disableScrollVertical: false,\r\n    enableBoundaryControl: false,\r\n    disableAutoPositionOnConflict: false,\r\n    dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\r\n};\n\nclass GridsterUtils {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static merge(obj1, obj2, properties) {\r\n        for (const p in obj2) {\r\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\r\n                if (typeof obj2[p] === 'object') {\r\n                    obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\r\n                }\r\n                else {\r\n                    obj1[p] = obj2[p];\r\n                }\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static checkTouchEvent(e) {\r\n        if (e.clientX === undefined && e.touches) {\r\n            if (e.touches && e.touches.length) {\r\n                e.clientX = e.touches[0].clientX;\r\n                e.clientY = e.touches[0].clientY;\r\n            }\r\n            else if (e.changedTouches && e.changedTouches.length) {\r\n                e.clientX = e.changedTouches[0].clientX;\r\n                e.clientY = e.changedTouches[0].clientY;\r\n            }\r\n        }\r\n    }\r\n    static checkContentClassForEvent(gridster, e) {\r\n        if (gridster.$options.draggable.ignoreContent) {\r\n            if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\r\n        return (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) ||\r\n            GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass));\r\n    }\r\n    static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\r\n        if (!target || target === current) {\r\n            return false;\r\n        }\r\n        if (target.hasAttribute('class')) {\r\n            const classnames = target.getAttribute('class').split(' ');\r\n            if (classnames.indexOf(dragHandleClass) > -1) {\r\n                return true;\r\n            }\r\n            if (classnames.indexOf(ignoreContentClass) > -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\r\n    }\r\n    static checkContentClass(target, current, contentClass) {\r\n        if (!target || target === current) {\r\n            return false;\r\n        }\r\n        if (target.hasAttribute('class') &&\r\n            target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\r\n        }\r\n    }\r\n    static compareItems(a, b) {\r\n        if (a.y > b.y) {\r\n            return -1;\r\n        }\r\n        else if (a.y < b.y) {\r\n            return 1;\r\n        }\r\n        else if (a.x > b.x) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\n\nclass GridsterEmptyCell {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n        this.emptyCellClickCb = (e) => {\r\n            if (!this.gridster ||\r\n                this.gridster.movingItem ||\r\n                GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n                return;\r\n            }\r\n            const item = this.getValidItemFromEvent(e);\r\n            if (!item) {\r\n                return;\r\n            }\r\n            if (this.gridster.options.emptyCellClickCallback) {\r\n                this.gridster.options.emptyCellClickCallback(e, item);\r\n            }\r\n            this.gridster.cdRef.markForCheck();\r\n        };\r\n        this.emptyCellContextMenuCb = (e) => {\r\n            if (this.gridster.movingItem ||\r\n                GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const item = this.getValidItemFromEvent(e);\r\n            if (!item) {\r\n                return;\r\n            }\r\n            if (this.gridster.options.emptyCellContextMenuCallback) {\r\n                this.gridster.options.emptyCellContextMenuCallback(e, item);\r\n            }\r\n            this.gridster.cdRef.markForCheck();\r\n        };\r\n        this.emptyCellDragDrop = (e) => {\r\n            const item = this.getValidItemFromEvent(e);\r\n            if (!item) {\r\n                return;\r\n            }\r\n            if (this.gridster.options.emptyCellDropCallback) {\r\n                this.gridster.options.emptyCellDropCallback(e, item);\r\n            }\r\n            this.gridster.cdRef.markForCheck();\r\n        };\r\n        this.emptyCellDragOver = (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const item = this.getValidItemFromEvent(e);\r\n            if (item) {\r\n                if (e.dataTransfer) {\r\n                    e.dataTransfer.dropEffect = 'move';\r\n                }\r\n                this.gridster.movingItem = item;\r\n            }\r\n            else {\r\n                if (e.dataTransfer) {\r\n                    e.dataTransfer.dropEffect = 'none';\r\n                }\r\n                this.gridster.movingItem = null;\r\n            }\r\n            this.gridster.previewStyle();\r\n        };\r\n        this.emptyCellMouseDown = (e) => {\r\n            if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const item = this.getValidItemFromEvent(e);\r\n            const leftMouseButtonCode = 1;\r\n            if (!item ||\r\n                (e.buttons !== leftMouseButtonCode && !(e instanceof TouchEvent))) {\r\n                return;\r\n            }\r\n            this.initialItem = item;\r\n            this.gridster.movingItem = item;\r\n            this.gridster.previewStyle();\r\n            this.gridster.zone.runOutsideAngular(() => {\r\n                this.removeWindowMousemoveListenerFn = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove);\r\n                this.removeWindowTouchmoveListenerFn = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove);\r\n            });\r\n            this.removeWindowMouseupListenerFn = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp);\r\n            this.removeWindowTouchendListenerFn = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp);\r\n        };\r\n        this.emptyCellMouseMove = (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const item = this.getValidItemFromEvent(e, this.initialItem);\r\n            if (!item) {\r\n                return;\r\n            }\r\n            this.gridster.movingItem = item;\r\n            this.gridster.previewStyle();\r\n        };\r\n        this.emptyCellMouseUp = (e) => {\r\n            this.removeWindowMousemoveListenerFn();\r\n            this.removeWindowTouchmoveListenerFn();\r\n            this.removeWindowMouseupListenerFn();\r\n            this.removeWindowTouchendListenerFn();\r\n            const item = this.getValidItemFromEvent(e, this.initialItem);\r\n            if (item) {\r\n                this.gridster.movingItem = item;\r\n            }\r\n            if (this.gridster.options.emptyCellDragCallback &&\r\n                this.gridster.movingItem) {\r\n                this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\r\n            }\r\n            setTimeout(() => {\r\n                this.initialItem = null;\r\n                if (this.gridster) {\r\n                    this.gridster.movingItem = null;\r\n                    this.gridster.previewStyle();\r\n                }\r\n            });\r\n            this.gridster.cdRef.markForCheck();\r\n        };\r\n    }\r\n    destroy() {\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle();\r\n        }\r\n        this.gridster.movingItem = null;\r\n        this.initialItem = this.gridster = null;\r\n        if (this.removeDocumentDragendListenerFn) {\r\n            this.removeDocumentDragendListenerFn();\r\n            this.removeDocumentDragendListenerFn = null;\r\n        }\r\n    }\r\n    updateOptions() {\r\n        if (this.gridster.$options.enableEmptyCellClick &&\r\n            !this.removeEmptyCellClickListenerFn &&\r\n            this.gridster.options.emptyCellClickCallback) {\r\n            this.removeEmptyCellClickListenerFn = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb);\r\n            this.removeEmptyCellTouchendListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb);\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellClick &&\r\n            this.removeEmptyCellClickListenerFn &&\r\n            this.removeEmptyCellTouchendListenerFn) {\r\n            this.removeEmptyCellClickListenerFn();\r\n            this.removeEmptyCellTouchendListenerFn();\r\n            this.removeEmptyCellClickListenerFn = null;\r\n            this.removeEmptyCellTouchendListenerFn = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellContextMenu &&\r\n            !this.removeEmptyCellContextMenuListenerFn &&\r\n            this.gridster.options.emptyCellContextMenuCallback) {\r\n            this.removeEmptyCellContextMenuListenerFn = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb);\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellContextMenu &&\r\n            this.removeEmptyCellContextMenuListenerFn) {\r\n            this.removeEmptyCellContextMenuListenerFn();\r\n            this.removeEmptyCellContextMenuListenerFn = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrop &&\r\n            !this.removeEmptyCellDropListenerFn &&\r\n            this.gridster.options.emptyCellDropCallback) {\r\n            this.removeEmptyCellDropListenerFn = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop);\r\n            this.gridster.zone.runOutsideAngular(() => {\r\n                this.removeEmptyCellDragoverListenerFn = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver);\r\n            });\r\n            this.removeDocumentDragendListenerFn = this.gridster.renderer.listen('document', 'dragend', () => {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            });\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrop &&\r\n            this.removeEmptyCellDropListenerFn &&\r\n            this.removeEmptyCellDragoverListenerFn &&\r\n            this.removeDocumentDragendListenerFn) {\r\n            this.removeEmptyCellDropListenerFn();\r\n            this.removeEmptyCellDragoverListenerFn();\r\n            this.removeDocumentDragendListenerFn();\r\n            this.removeEmptyCellDragoverListenerFn = null;\r\n            this.removeEmptyCellDropListenerFn = null;\r\n            this.removeDocumentDragendListenerFn = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrag &&\r\n            !this.removeEmptyCellMousedownListenerFn &&\r\n            this.gridster.options.emptyCellDragCallback) {\r\n            this.removeEmptyCellMousedownListenerFn = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown);\r\n            this.removeEmptyCellTouchstartListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown);\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrag &&\r\n            this.removeEmptyCellMousedownListenerFn &&\r\n            this.removeEmptyCellTouchstartListenerFn) {\r\n            this.removeEmptyCellMousedownListenerFn();\r\n            this.removeEmptyCellTouchstartListenerFn();\r\n            this.removeEmptyCellMousedownListenerFn = null;\r\n            this.removeEmptyCellTouchstartListenerFn = null;\r\n        }\r\n    }\r\n    getPixelsX(e, rect) {\r\n        const scale = this.gridster.options.scale;\r\n        if (scale) {\r\n            return ((e.clientX - rect.left) / scale +\r\n                this.gridster.el.scrollLeft -\r\n                this.gridster.gridRenderer.getLeftMargin());\r\n        }\r\n        return (e.clientX +\r\n            this.gridster.el.scrollLeft -\r\n            rect.left -\r\n            this.gridster.gridRenderer.getLeftMargin());\r\n    }\r\n    getPixelsY(e, rect) {\r\n        const scale = this.gridster.options.scale;\r\n        if (scale) {\r\n            return ((e.clientY - rect.top) / scale +\r\n                this.gridster.el.scrollTop -\r\n                this.gridster.gridRenderer.getTopMargin());\r\n        }\r\n        return (e.clientY +\r\n            this.gridster.el.scrollTop -\r\n            rect.top -\r\n            this.gridster.gridRenderer.getTopMargin());\r\n    }\r\n    getValidItemFromEvent(e, oldItem) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        const rect = this.gridster.el.getBoundingClientRect();\r\n        const x = this.getPixelsX(e, rect);\r\n        const y = this.getPixelsY(e, rect);\r\n        const item = {\r\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\r\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\r\n            cols: this.gridster.$options.defaultItemCols,\r\n            rows: this.gridster.$options.defaultItemRows\r\n        };\r\n        if (oldItem) {\r\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\r\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\r\n            if (oldItem.x < item.x) {\r\n                item.x = oldItem.x;\r\n            }\r\n            else if (oldItem.x - item.x >\r\n                this.gridster.$options.emptyCellDragMaxCols - 1) {\r\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\r\n            }\r\n            if (oldItem.y < item.y) {\r\n                item.y = oldItem.y;\r\n            }\r\n            else if (oldItem.y - item.y >\r\n                this.gridster.$options.emptyCellDragMaxRows - 1) {\r\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\r\n            }\r\n        }\r\n        if (!this.gridster.$options.enableOccupiedCellDrop &&\r\n            this.gridster.checkCollision(item)) {\r\n            return;\r\n        }\r\n        return item;\r\n    }\r\n}\n\nclass GridsterRenderer {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    destroy() {\r\n        this.gridster = null;\r\n    }\r\n    updateItem(el, item, renderer) {\r\n        if (this.gridster.mobile) {\r\n            this.clearCellPosition(renderer, el);\r\n            if (this.gridster.$options.keepFixedHeightInMobile) {\r\n                renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin +\r\n                    item.rows * this.gridster.$options.fixedRowHeight +\r\n                    'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth) / item.cols + 'px');\r\n            }\r\n            if (this.gridster.$options.keepFixedWidthInMobile) {\r\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'width', '');\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\r\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\r\n        }\r\n        else {\r\n            const x = Math.round(this.gridster.curColWidth * item.x);\r\n            const y = Math.round(this.gridster.curRowHeight * item.y);\r\n            const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\r\n            const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin;\r\n            // set the cell style\r\n            this.setCellPosition(renderer, el, x, y);\r\n            renderer.setStyle(el, 'width', width + 'px');\r\n            renderer.setStyle(el, 'height', height + 'px');\r\n            let marginBottom = null;\r\n            let marginRight = null;\r\n            if (this.gridster.$options.outerMargin) {\r\n                if (this.gridster.rows === item.rows + item.y) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\r\n                    }\r\n                    else {\r\n                        marginBottom = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n                if (this.gridster.columns === item.cols + item.x) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\r\n                    }\r\n                    else {\r\n                        marginRight = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\r\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\r\n        }\r\n    }\r\n    updateGridster() {\r\n        let addClass = '';\r\n        let removeClass1 = '';\r\n        let removeClass2 = '';\r\n        let removeClass3 = '';\r\n        if (this.gridster.$options.gridType === GridType.Fit) {\r\n            addClass = GridType.Fit;\r\n            removeClass1 = GridType.ScrollVertical;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\r\n            this.gridster.curRowHeight =\r\n                this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\r\n            const widthRatio = this.gridster.$options.rowHeightRatio;\r\n            const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\r\n            this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\r\n            this.gridster.curColWidth =\r\n                this.gridster.$options.fixedColWidth +\r\n                    (this.gridster.$options.ignoreMarginInRow\r\n                        ? 0\r\n                        : this.gridster.$options.margin);\r\n            this.gridster.curRowHeight =\r\n                this.gridster.$options.fixedRowHeight +\r\n                    (this.gridster.$options.ignoreMarginInRow\r\n                        ? 0\r\n                        : this.gridster.$options.margin);\r\n            addClass = GridType.Fixed;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.ScrollHorizontal;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\r\n            this.gridster.curRowHeight =\r\n                this.gridster.$options.fixedRowHeight +\r\n                    (this.gridster.$options.ignoreMarginInRow\r\n                        ? 0\r\n                        : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\r\n            this.gridster.curColWidth =\r\n                this.gridster.$options.fixedColWidth +\r\n                    (this.gridster.$options.ignoreMarginInRow\r\n                        ? 0\r\n                        : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        if (this.gridster.mobile ||\r\n            (this.gridster.$options.setGridSize &&\r\n                this.gridster.$options.gridType !== GridType.Fit)) {\r\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\r\n        }\r\n        else {\r\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\r\n        }\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\r\n    }\r\n    getGridColumnStyle(i) {\r\n        return Object.assign(Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i)), { width: this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.gridRows.length * this.gridster.curRowHeight -\r\n                this.gridster.$options.margin +\r\n                'px' });\r\n    }\r\n    getGridRowStyle(i) {\r\n        return Object.assign(Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i)), { width: this.gridster.gridColumns.length * this.gridster.curColWidth -\r\n                this.gridster.$options.margin +\r\n                'px', height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\r\n    }\r\n    getLeftPosition(d) {\r\n        const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            return {\r\n                transform: 'translateX(' + dPosition + 'px)'\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                left: this.getLeftMargin() + dPosition + 'px'\r\n            };\r\n        }\r\n    }\r\n    getTopPosition(d) {\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            return {\r\n                transform: 'translateY(' + d + 'px)'\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                top: this.getTopMargin() + d + 'px'\r\n            };\r\n        }\r\n    }\r\n    clearCellPosition(renderer, el) {\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            renderer.setStyle(el, 'transform', '');\r\n        }\r\n        else {\r\n            renderer.setStyle(el, 'top', '');\r\n            renderer.setStyle(el, 'left', '');\r\n        }\r\n    }\r\n    setCellPosition(renderer, el, x, y) {\r\n        const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\r\n            renderer.setStyle(el, 'transform', transform);\r\n        }\r\n        else {\r\n            renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\r\n            renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\r\n        }\r\n    }\r\n    getLeftMargin() {\r\n        if (this.gridster.$options.outerMargin) {\r\n            if (this.gridster.$options.outerMarginLeft !== null) {\r\n                return this.gridster.$options.outerMarginLeft;\r\n            }\r\n            else {\r\n                return this.gridster.$options.margin;\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    getTopMargin() {\r\n        if (this.gridster.$options.outerMargin) {\r\n            if (this.gridster.$options.outerMarginTop !== null) {\r\n                return this.gridster.$options.outerMarginTop;\r\n            }\r\n            else {\r\n                return this.gridster.$options.margin;\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\n\nclass GridsterPreviewComponent {\r\n    constructor(el, renderer) {\r\n        this.renderer = renderer;\r\n        this.el = el.nativeElement;\r\n    }\r\n    ngOnInit() {\r\n        this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\r\n    }\r\n    ngOnDestroy() {\r\n        this.sub.unsubscribe();\r\n    }\r\n    previewStyle(item) {\r\n        if (item) {\r\n            this.renderer.setStyle(this.el, 'display', 'block');\r\n            this.gridRenderer.updateItem(this.el, item, this.renderer);\r\n        }\r\n        else {\r\n            this.renderer.setStyle(this.el, 'display', '');\r\n        }\r\n    }\r\n}\r\nGridsterPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterPreviewComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: GridsterPreviewComponent, selector: \"gridster-preview\", inputs: { previewStyle$: \"previewStyle$\", gridRenderer: \"gridRenderer\" }, ngImport: i0, template: '', isInline: true, styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterPreviewComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'gridster-preview', template: '', encapsulation: ViewEncapsulation.None, styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { previewStyle$: [{\r\n                type: Input\r\n            }], gridRenderer: [{\r\n                type: Input\r\n            }] } });\n\nclass GridsterComponent {\r\n    constructor(el, renderer, cdRef, zone) {\r\n        this.renderer = renderer;\r\n        this.cdRef = cdRef;\r\n        this.zone = zone;\r\n        this.columns = 0;\r\n        this.rows = 0;\r\n        this.gridColumns = [];\r\n        this.gridRows = [];\r\n        this.previewStyle$ = new EventEmitter();\r\n        this.calculateLayout$ = new Subject();\r\n        this.resize$ = new Subject();\r\n        this.destroy$ = new Subject();\r\n        this.optionsChanged = () => {\r\n            this.setOptions();\r\n            let widgetsIndex = this.grid.length - 1;\r\n            let widget;\r\n            for (; widgetsIndex >= 0; widgetsIndex--) {\r\n                widget = this.grid[widgetsIndex];\r\n                widget.updateOptions();\r\n            }\r\n            this.calculateLayout();\r\n        };\r\n        this.onResize = () => {\r\n            if (this.el.clientWidth) {\r\n                if (this.options.setGridSize) {\r\n                    // reset width/height so the size is recalculated afterwards\r\n                    this.renderer.setStyle(this.el, 'width', '');\r\n                    this.renderer.setStyle(this.el, 'height', '');\r\n                }\r\n                this.setGridSize();\r\n                this.calculateLayout();\r\n            }\r\n        };\r\n        this.getNextPossiblePosition = (newItem, startingFrom = {}) => {\r\n            if (newItem.cols === -1) {\r\n                newItem.cols = this.$options.defaultItemCols;\r\n            }\r\n            if (newItem.rows === -1) {\r\n                newItem.rows = this.$options.defaultItemRows;\r\n            }\r\n            this.setGridDimensions();\r\n            let rowsIndex = startingFrom.y || 0;\r\n            let colsIndex;\r\n            for (; rowsIndex < this.rows; rowsIndex++) {\r\n                newItem.y = rowsIndex;\r\n                colsIndex = startingFrom.x || 0;\r\n                for (; colsIndex < this.columns; colsIndex++) {\r\n                    newItem.x = colsIndex;\r\n                    if (!this.checkCollision(newItem)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\r\n            const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\r\n            const addToRows = this.rows <= this.columns && canAddToRows;\r\n            if (!addToRows && canAddToColumns) {\r\n                newItem.x = this.columns;\r\n                newItem.y = 0;\r\n                return true;\r\n            }\r\n            else if (canAddToRows) {\r\n                newItem.y = this.rows;\r\n                newItem.x = 0;\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.getFirstPossiblePosition = (item) => {\r\n            const tmpItem = Object.assign({}, item);\r\n            this.getNextPossiblePosition(tmpItem);\r\n            return tmpItem;\r\n        };\r\n        this.getLastPossiblePosition = (item) => {\r\n            let farthestItem = { y: 0, x: 0 };\r\n            farthestItem = this.grid.reduce((prev, curr) => {\r\n                const currCoords = {\r\n                    y: curr.$item.y + curr.$item.rows - 1,\r\n                    x: curr.$item.x + curr.$item.cols - 1\r\n                };\r\n                if (GridsterUtils.compareItems(prev, currCoords) === 1) {\r\n                    return currCoords;\r\n                }\r\n                else {\r\n                    return prev;\r\n                }\r\n            }, farthestItem);\r\n            const tmpItem = Object.assign({}, item);\r\n            this.getNextPossiblePosition(tmpItem, farthestItem);\r\n            return tmpItem;\r\n        };\r\n        this.el = el.nativeElement;\r\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\r\n        this.mobile = false;\r\n        this.curWidth = 0;\r\n        this.curHeight = 0;\r\n        this.grid = [];\r\n        this.curColWidth = 0;\r\n        this.curRowHeight = 0;\r\n        this.dragInProgress = false;\r\n        this.emptyCell = new GridsterEmptyCell(this);\r\n        this.compact = new GridsterCompact(this);\r\n        this.gridRenderer = new GridsterRenderer(this);\r\n    }\r\n    // ------ Function for swapWhileDragging option\r\n    // identical to checkCollision() except that here we add boundaries.\r\n    static checkCollisionTwoItemsForSwaping(item, item2) {\r\n        // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\r\n        const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\r\n        const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\r\n        const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\r\n        const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\r\n        return (item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\r\n            item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\r\n            item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\r\n            item.y + item.rows > item2.y + verticalBoundaryItem2);\r\n    }\r\n    checkCollisionTwoItems(item, item2) {\r\n        const collision = item.x < item2.x + item2.cols &&\r\n            item.x + item.cols > item2.x &&\r\n            item.y < item2.y + item2.rows &&\r\n            item.y + item.rows > item2.y;\r\n        if (!collision) {\r\n            return false;\r\n        }\r\n        if (!this.$options.allowMultiLayer) {\r\n            return true;\r\n        }\r\n        const defaultLayerIndex = this.$options.defaultLayerIndex;\r\n        const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\r\n        const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\r\n        return layerIndex === layerIndex2;\r\n    }\r\n    ngOnInit() {\r\n        if (this.options.initCallback) {\r\n            this.options.initCallback(this);\r\n        }\r\n        this.calculateLayout$\r\n            .pipe(debounceTime(0), takeUntil(this.destroy$))\r\n            .subscribe(() => this.calculateLayout());\r\n        this.resize$\r\n            .pipe(\r\n        // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\r\n        // within this time range.\r\n        switchMap(() => timer(100)), takeUntil(this.destroy$))\r\n            .subscribe(() => this.resize());\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.options) {\r\n            this.setOptions();\r\n            this.options.api = {\r\n                optionsChanged: this.optionsChanged,\r\n                resize: this.onResize,\r\n                getNextPossiblePosition: this.getNextPossiblePosition,\r\n                getFirstPossiblePosition: this.getFirstPossiblePosition,\r\n                getLastPossiblePosition: this.getLastPossiblePosition,\r\n                getItemComponent: (item) => this.getItemComponent(item)\r\n            };\r\n            this.columns = this.$options.minCols;\r\n            this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\r\n            this.setGridSize();\r\n            this.calculateLayout();\r\n        }\r\n    }\r\n    resize() {\r\n        let height;\r\n        let width;\r\n        if (this.$options.gridType === 'fit' && !this.mobile) {\r\n            width = this.el.offsetWidth;\r\n            height = this.el.offsetHeight;\r\n        }\r\n        else {\r\n            width = this.el.clientWidth;\r\n            height = this.el.clientHeight;\r\n        }\r\n        if ((width !== this.curWidth || height !== this.curHeight) &&\r\n            this.checkIfToResize()) {\r\n            this.onResize();\r\n        }\r\n    }\r\n    setOptions() {\r\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\r\n        if (!this.$options.disableWindowResize && !this.windowResize) {\r\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize);\r\n        }\r\n        else if (this.$options.disableWindowResize && this.windowResize) {\r\n            this.windowResize();\r\n            this.windowResize = null;\r\n        }\r\n        this.emptyCell.updateOptions();\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.previewStyle$.complete();\r\n        if (this.windowResize) {\r\n            this.windowResize();\r\n        }\r\n        if (this.options && this.options.destroyCallback) {\r\n            this.options.destroyCallback(this);\r\n        }\r\n        if (this.options && this.options.api) {\r\n            this.options.api.resize = undefined;\r\n            this.options.api.optionsChanged = undefined;\r\n            this.options.api.getNextPossiblePosition = undefined;\r\n            this.options.api = undefined;\r\n        }\r\n        this.emptyCell.destroy();\r\n        this.emptyCell = null;\r\n        this.compact.destroy();\r\n        this.compact = null;\r\n    }\r\n    checkIfToResize() {\r\n        const clientWidth = this.el.clientWidth;\r\n        const offsetWidth = this.el.offsetWidth;\r\n        const scrollWidth = this.el.scrollWidth;\r\n        const clientHeight = this.el.clientHeight;\r\n        const offsetHeight = this.el.offsetHeight;\r\n        const scrollHeight = this.el.scrollHeight;\r\n        const verticalScrollPresent = clientWidth < offsetWidth &&\r\n            scrollHeight > offsetHeight &&\r\n            scrollHeight - offsetHeight < offsetWidth - clientWidth;\r\n        const horizontalScrollPresent = clientHeight < offsetHeight &&\r\n            scrollWidth > offsetWidth &&\r\n            scrollWidth - offsetWidth < offsetHeight - clientHeight;\r\n        if (verticalScrollPresent) {\r\n            return false;\r\n        }\r\n        return !horizontalScrollPresent;\r\n    }\r\n    checkIfMobile() {\r\n        if (this.$options.useBodyForBreakpoint) {\r\n            return this.$options.mobileBreakpoint > document.body.clientWidth;\r\n        }\r\n        else {\r\n            return this.$options.mobileBreakpoint > this.curWidth;\r\n        }\r\n    }\r\n    setGridSize() {\r\n        const el = this.el;\r\n        let width;\r\n        let height;\r\n        if (this.$options.setGridSize ||\r\n            (this.$options.gridType === GridType.Fit && !this.mobile)) {\r\n            width = el.offsetWidth;\r\n            height = el.offsetHeight;\r\n        }\r\n        else {\r\n            width = el.clientWidth;\r\n            height = el.clientHeight;\r\n        }\r\n        this.curWidth = width;\r\n        this.curHeight = height;\r\n    }\r\n    setGridDimensions() {\r\n        this.setGridSize();\r\n        if (!this.mobile && this.checkIfMobile()) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.addClass(this.el, 'mobile');\r\n        }\r\n        else if (this.mobile && !this.checkIfMobile()) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.removeClass(this.el, 'mobile');\r\n        }\r\n        let rows = this.$options.minRows;\r\n        let columns = this.$options.minCols;\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (!widget.notPlaced) {\r\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\r\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\r\n            }\r\n        }\r\n        rows += this.$options.addEmptyRowsCount;\r\n        if (this.columns !== columns || this.rows !== rows) {\r\n            this.columns = columns;\r\n            this.rows = rows;\r\n            if (this.options.gridSizeChangedCallback) {\r\n                this.options.gridSizeChangedCallback(this);\r\n            }\r\n        }\r\n    }\r\n    calculateLayout() {\r\n        if (this.compact) {\r\n            this.compact.checkCompact();\r\n        }\r\n        this.setGridDimensions();\r\n        if (this.$options.outerMargin) {\r\n            let marginWidth = -this.$options.margin;\r\n            if (this.$options.outerMarginLeft !== null) {\r\n                marginWidth += this.$options.outerMarginLeft;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginRight !== null) {\r\n                marginWidth += this.$options.outerMarginRight;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\r\n            }\r\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\r\n            let marginHeight = -this.$options.margin;\r\n            if (this.$options.outerMarginTop !== null) {\r\n                marginHeight += this.$options.outerMarginTop;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginBottom !== null) {\r\n                marginHeight += this.$options.outerMarginBottom;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\r\n            }\r\n            this.curRowHeight =\r\n                ((this.curHeight - marginHeight) / this.rows) *\r\n                    this.$options.rowHeightRatio;\r\n        }\r\n        else {\r\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\r\n            this.curRowHeight =\r\n                ((this.curHeight + this.$options.margin) / this.rows) *\r\n                    this.$options.rowHeightRatio;\r\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\r\n        }\r\n        this.gridRenderer.updateGridster();\r\n        if (this.$options.setGridSize) {\r\n            this.renderer.addClass(this.el, 'gridSize');\r\n            if (!this.mobile) {\r\n                this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\r\n                this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\r\n            }\r\n        }\r\n        else {\r\n            this.renderer.removeClass(this.el, 'gridSize');\r\n            this.renderer.setStyle(this.el, 'width', '');\r\n            this.renderer.setStyle(this.el, 'height', '');\r\n        }\r\n        this.updateGrid();\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            widget.setSize();\r\n            widget.drag.toggle();\r\n            widget.resize.toggle();\r\n        }\r\n        this.resize$.next();\r\n    }\r\n    updateGrid() {\r\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'onDrag&Resize' &&\r\n            this.dragInProgress) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'none' ||\r\n            !this.dragInProgress ||\r\n            this.mobile) {\r\n            this.renderer.removeClass(this.el, 'display-grid');\r\n        }\r\n        this.setGridDimensions();\r\n        this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\r\n        this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\r\n        this.cdRef.markForCheck();\r\n    }\r\n    addItem(itemComponent) {\r\n        if (itemComponent.$item.cols === undefined) {\r\n            itemComponent.$item.cols = this.$options.defaultItemCols;\r\n            itemComponent.item.cols = itemComponent.$item.cols;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.rows === undefined) {\r\n            itemComponent.$item.rows = this.$options.defaultItemRows;\r\n            itemComponent.item.rows = itemComponent.$item.rows;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\r\n            this.autoPositionItem(itemComponent);\r\n        }\r\n        else if (this.checkCollision(itemComponent.$item)) {\r\n            if (!this.$options.disableWarnings) {\r\n                itemComponent.notPlaced = true;\r\n                console.warn(\"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n            if (!this.$options.disableAutoPositionOnConflict) {\r\n                this.autoPositionItem(itemComponent);\r\n            }\r\n            else {\r\n                itemComponent.notPlaced = true;\r\n            }\r\n        }\r\n        this.grid.push(itemComponent);\r\n        this.calculateLayout$.next();\r\n    }\r\n    removeItem(itemComponent) {\r\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\r\n        this.calculateLayout$.next();\r\n        if (this.options.itemRemovedCallback) {\r\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\r\n        }\r\n    }\r\n    checkCollision(item) {\r\n        let collision = false;\r\n        if (this.options.itemValidateCallback) {\r\n            collision = !this.options.itemValidateCallback(item);\r\n        }\r\n        if (!collision && this.checkGridCollision(item)) {\r\n            collision = true;\r\n        }\r\n        if (!collision) {\r\n            const c = this.findItemWithItem(item);\r\n            if (c) {\r\n                collision = c;\r\n            }\r\n        }\r\n        return collision;\r\n    }\r\n    checkGridCollision(item) {\r\n        const noNegativePosition = item.y > -1 && item.x > -1;\r\n        const maxGridCols = item.cols + item.x <= this.$options.maxCols;\r\n        const maxGridRows = item.rows + item.y <= this.$options.maxRows;\r\n        const maxItemCols = item.maxItemCols === undefined\r\n            ? this.$options.maxItemCols\r\n            : item.maxItemCols;\r\n        const minItemCols = item.minItemCols === undefined\r\n            ? this.$options.minItemCols\r\n            : item.minItemCols;\r\n        const maxItemRows = item.maxItemRows === undefined\r\n            ? this.$options.maxItemRows\r\n            : item.maxItemRows;\r\n        const minItemRows = item.minItemRows === undefined\r\n            ? this.$options.minItemRows\r\n            : item.minItemRows;\r\n        const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\r\n        const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\r\n        const minAreaLimit = item.minItemArea === undefined\r\n            ? this.$options.minItemArea\r\n            : item.minItemArea;\r\n        const maxAreaLimit = item.maxItemArea === undefined\r\n            ? this.$options.maxItemArea\r\n            : item.maxItemArea;\r\n        const area = item.cols * item.rows;\r\n        const inMinArea = minAreaLimit <= area;\r\n        const inMaxArea = maxAreaLimit >= area;\r\n        return !(noNegativePosition &&\r\n            maxGridCols &&\r\n            maxGridRows &&\r\n            inColsLimits &&\r\n            inRowsLimits &&\r\n            inMinArea &&\r\n            inMaxArea);\r\n    }\r\n    findItemWithItem(item) {\r\n        let widgetsIndex = 0;\r\n        let widget;\r\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item &&\r\n                this.checkCollisionTwoItems(widget.$item, item)) {\r\n                return widget;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    findItemsWithItem(item) {\r\n        const a = [];\r\n        let widgetsIndex = 0;\r\n        let widget;\r\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item &&\r\n                this.checkCollisionTwoItems(widget.$item, item)) {\r\n                a.push(widget);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    autoPositionItem(itemComponent) {\r\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\r\n            itemComponent.notPlaced = false;\r\n            itemComponent.item.x = itemComponent.$item.x;\r\n            itemComponent.item.y = itemComponent.$item.y;\r\n            itemComponent.itemChanged();\r\n        }\r\n        else {\r\n            itemComponent.notPlaced = true;\r\n            if (!this.$options.disableWarnings) {\r\n                console.warn(\"Can't be placed in the bounds of the dashboard!/n\" +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n        }\r\n    }\r\n    pixelsToPositionX(x, roundingMethod, noLimit) {\r\n        const position = roundingMethod(x / this.curColWidth);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    pixelsToPositionY(y, roundingMethod, noLimit) {\r\n        const position = roundingMethod(y / this.curRowHeight);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    positionXToPixels(x) {\r\n        return x * this.curColWidth;\r\n    }\r\n    positionYToPixels(y) {\r\n        return y * this.curRowHeight;\r\n    }\r\n    getItemComponent(item) {\r\n        return this.grid.find(c => c.item === item);\r\n    }\r\n    // ------ Functions for swapWhileDragging option\r\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\r\n    checkCollisionForSwaping(item) {\r\n        let collision = false;\r\n        if (this.options.itemValidateCallback) {\r\n            collision = !this.options.itemValidateCallback(item);\r\n        }\r\n        if (!collision && this.checkGridCollision(item)) {\r\n            collision = true;\r\n        }\r\n        if (!collision) {\r\n            const c = this.findItemWithItemForSwapping(item);\r\n            if (c) {\r\n                collision = c;\r\n            }\r\n        }\r\n        return collision;\r\n    }\r\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\r\n    findItemWithItemForSwapping(item) {\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex > -1; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item &&\r\n                GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\r\n                return widget;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    previewStyle(drag = false) {\r\n        if (this.movingItem) {\r\n            if (this.compact && drag) {\r\n                this.compact.checkCompactItem(this.movingItem);\r\n            }\r\n            this.previewStyle$.next(this.movingItem);\r\n        }\r\n        else {\r\n            this.previewStyle$.next(null);\r\n        }\r\n    }\r\n    // ------ End of functions for swapWhileDragging option\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    static getNewArrayLength(length, overallSize, size) {\r\n        const newLength = Math.max(length, Math.floor(overallSize / size));\r\n        if (newLength < 0) {\r\n            return 0;\r\n        }\r\n        if (Number.isFinite(newLength)) {\r\n            return Math.floor(newLength);\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nGridsterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterComponent, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: GridsterComponent, selector: \"gridster\", inputs: { options: \"options\" }, usesOnChanges: true, ngImport: i0, template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\", styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"], components: [{ type: GridsterPreviewComponent, selector: \"gridster-preview\", inputs: [\"previewStyle$\", \"gridRenderer\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'gridster', encapsulation: ViewEncapsulation.None, template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\", styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef, decorators: [{\r\n                        type: Inject,\r\n                        args: [ElementRef]\r\n                    }] }, { type: i0.Renderer2, decorators: [{\r\n                        type: Inject,\r\n                        args: [Renderer2]\r\n                    }] }, { type: i0.ChangeDetectorRef, decorators: [{\r\n                        type: Inject,\r\n                        args: [ChangeDetectorRef]\r\n                    }] }, { type: i0.NgZone, decorators: [{\r\n                        type: Inject,\r\n                        args: [NgZone]\r\n                    }] }];\r\n    }, propDecorators: { options: [{\r\n                type: Input\r\n            }] } });\n\nclass GridsterPush {\r\n    constructor(gridsterItem) {\r\n        this.iteration = 0;\r\n        this.pushedItems = [];\r\n        this.pushedItemsTemp = [];\r\n        this.pushedItemsTempPath = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\r\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\r\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\r\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    destroy() {\r\n        this.gridster = this.gridsterItem = null;\r\n    }\r\n    pushItems(direction, disable) {\r\n        if (this.gridster.$options.pushItems && !disable) {\r\n            this.pushedItemsOrder = [];\r\n            this.iteration = 0;\r\n            const pushed = this.push(this.gridsterItem, direction);\r\n            if (!pushed) {\r\n                this.restoreTempItems();\r\n            }\r\n            this.pushedItemsOrder = [];\r\n            this.pushedItemsTemp = [];\r\n            this.pushedItemsTempPath = [];\r\n            return pushed;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    restoreTempItems() {\r\n        let i = this.pushedItemsTemp.length - 1;\r\n        for (; i > -1; i--) {\r\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\r\n        }\r\n    }\r\n    restoreItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    setPushedItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    checkPushBack() {\r\n        let i = this.pushedItems.length - 1;\r\n        let change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    push(gridsterItem, direction) {\r\n        if (this.iteration > 100) {\r\n            console.warn('max iteration reached');\r\n            return false;\r\n        }\r\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\r\n            return false;\r\n        }\r\n        if (direction === '') {\r\n            return false;\r\n        }\r\n        const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\r\n        const invert = direction === this.fromNorth || direction === this.fromWest;\r\n        // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\r\n        // this is done so they don't conflict witch each other and revert positions, keeping the previous order\r\n        conflicts.sort((a, b) => {\r\n            if (invert) {\r\n                return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\r\n            }\r\n            else {\r\n                return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\r\n            }\r\n        });\r\n        let i = 0;\r\n        let itemCollision;\r\n        let makePush = true;\r\n        const pushedItems = [];\r\n        for (; i < conflicts.length; i++) {\r\n            itemCollision = conflicts[i];\r\n            if (itemCollision === this.gridsterItem) {\r\n                continue;\r\n            }\r\n            if (!itemCollision.canBeDragged()) {\r\n                makePush = false;\r\n                break;\r\n            }\r\n            const p = this.pushedItemsTemp.indexOf(itemCollision);\r\n            if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\r\n                // stop if item is pushed more than 10 times to break infinite loops\r\n                makePush = false;\r\n                break;\r\n            }\r\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else {\r\n                makePush = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!makePush) {\r\n            i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\r\n            if (i > -1) {\r\n                let j = this.pushedItemsOrder.length - 1;\r\n                for (; j >= i; j--) {\r\n                    itemCollision = this.pushedItemsOrder[j];\r\n                    this.pushedItemsOrder.pop();\r\n                    this.removeFromTempPushed(itemCollision);\r\n                    this.removeFromPushedItem(itemCollision);\r\n                }\r\n            }\r\n        }\r\n        this.iteration++;\r\n        return makePush;\r\n    }\r\n    trySouth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.south) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y =\r\n            gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryNorth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.north) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y =\r\n            gridsterItem.$item.y - gridsterItemCollide.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryEast(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.east) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x =\r\n            gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromWest)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryWest(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.west) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x =\r\n            gridsterItem.$item.x - gridsterItemCollide.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromEast)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    addToTempPushed(gridsterItem) {\r\n        let i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        if (i === -1) {\r\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\r\n            this.pushedItemsTempPath[i] = [];\r\n        }\r\n        this.pushedItemsTempPath[i].push({\r\n            x: gridsterItem.$item.x,\r\n            y: gridsterItem.$item.y\r\n        });\r\n    }\r\n    removeFromTempPushed(gridsterItem) {\r\n        const i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        const tempPosition = this.pushedItemsTempPath[i].pop();\r\n        if (!tempPosition) {\r\n            return;\r\n        }\r\n        gridsterItem.$item.x = tempPosition.x;\r\n        gridsterItem.$item.y = tempPosition.y;\r\n        gridsterItem.setSize();\r\n        if (!this.pushedItemsTempPath[i].length) {\r\n            this.pushedItemsTemp.splice(i, 1);\r\n            this.pushedItemsTempPath.splice(i, 1);\r\n        }\r\n    }\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([\r\n                { x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\r\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }\r\n            ]);\r\n        }\r\n        else {\r\n            const i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({\r\n                x: gridsterItem.$item.x,\r\n                y: gridsterItem.$item.y\r\n            });\r\n        }\r\n    }\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    removeFromPushedItem(gridsterItem) {\r\n        const i = this.pushedItems.indexOf(gridsterItem);\r\n        if (i > -1) {\r\n            this.pushedItemsPath[i].pop();\r\n            if (!this.pushedItemsPath.length) {\r\n                this.pushedItems.splice(i, 1);\r\n                this.pushedItemsPath.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    checkPushedItem(pushedItem, i) {\r\n        const path = this.pushedItemsPath[i];\r\n        let j = path.length - 2;\r\n        let lastPosition;\r\n        let x;\r\n        let y;\r\n        let change = false;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - j - 1);\r\n                change = true;\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n        }\r\n        return change;\r\n    }\r\n}\n\nlet scrollSensitivity;\r\nlet scrollSpeed;\r\nconst intervalDuration = 50;\r\nlet gridsterElement;\r\nlet resizeEvent;\r\nlet resizeEventType;\r\nlet intervalE;\r\nlet intervalW;\r\nlet intervalN;\r\nlet intervalS;\r\nfunction scroll(gridster, left, top, width, height, event, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\r\n    scrollSensitivity = gridster.$options.scrollSensitivity;\r\n    scrollSpeed = gridster.$options.scrollSpeed;\r\n    gridsterElement = gridster.el;\r\n    resizeEvent = resize;\r\n    resizeEventType = resizeEventScrollType;\r\n    const offsetWidth = gridsterElement.offsetWidth;\r\n    const offsetHeight = gridsterElement.offsetHeight;\r\n    const offsetLeft = gridsterElement.scrollLeft;\r\n    const offsetTop = gridsterElement.scrollTop;\r\n    const elemTopOffset = top - offsetTop;\r\n    const elemBottomOffset = offsetHeight + offsetTop - top - height;\r\n    const { clientX, clientY } = event;\r\n    if (!gridster.$options.disableScrollVertical) {\r\n        if (lastMouse.clientY < clientY && elemBottomOffset < scrollSensitivity) {\r\n            cancelN();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.south) ||\r\n                intervalS) {\r\n                return;\r\n            }\r\n            intervalS = startVertical(1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientY > clientY &&\r\n            offsetTop > 0 &&\r\n            elemTopOffset < scrollSensitivity) {\r\n            cancelS();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.north) ||\r\n                intervalN) {\r\n                return;\r\n            }\r\n            intervalN = startVertical(-1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientY !== clientY) {\r\n            cancelVertical();\r\n        }\r\n    }\r\n    const elemRightOffset = offsetLeft + offsetWidth - left - width;\r\n    const elemLeftOffset = left - offsetLeft;\r\n    if (!gridster.$options.disableScrollHorizontal) {\r\n        if (lastMouse.clientX < clientX && elemRightOffset <= scrollSensitivity) {\r\n            cancelW();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.east) ||\r\n                intervalE) {\r\n                return;\r\n            }\r\n            intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientX > clientX &&\r\n            offsetLeft > 0 &&\r\n            elemLeftOffset < scrollSensitivity) {\r\n            cancelE();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.west) ||\r\n                intervalW) {\r\n                return;\r\n            }\r\n            intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientX !== clientX) {\r\n            cancelHorizontal();\r\n        }\r\n    }\r\n}\r\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\r\n    let clientY = lastMouse.clientY;\r\n    return window.setInterval(() => {\r\n        if (!gridsterElement ||\r\n            (sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0)) {\r\n            cancelVertical();\r\n        }\r\n        gridsterElement.scrollTop += sign * scrollSpeed;\r\n        clientY += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY });\r\n    }, intervalDuration);\r\n}\r\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\r\n    let clientX = lastMouse.clientX;\r\n    return window.setInterval(() => {\r\n        if (!gridsterElement ||\r\n            (sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0)) {\r\n            cancelHorizontal();\r\n        }\r\n        gridsterElement.scrollLeft += sign * scrollSpeed;\r\n        clientX += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX, clientY: lastMouse.clientY });\r\n    }, intervalDuration);\r\n}\r\nfunction cancelScroll() {\r\n    cancelHorizontal();\r\n    cancelVertical();\r\n    gridsterElement = null;\r\n}\r\nfunction cancelHorizontal() {\r\n    cancelE();\r\n    cancelW();\r\n}\r\nfunction cancelVertical() {\r\n    cancelN();\r\n    cancelS();\r\n}\r\nfunction cancelE() {\r\n    if (intervalE) {\r\n        clearInterval(intervalE);\r\n        intervalE = 0;\r\n    }\r\n}\r\nfunction cancelW() {\r\n    if (intervalW) {\r\n        clearInterval(intervalW);\r\n        intervalW = 0;\r\n    }\r\n}\r\nfunction cancelS() {\r\n    if (intervalS) {\r\n        clearInterval(intervalS);\r\n        intervalS = 0;\r\n    }\r\n}\r\nfunction cancelN() {\r\n    if (intervalN) {\r\n        clearInterval(intervalN);\r\n        intervalN = 0;\r\n    }\r\n}\n\nclass GridsterSwap {\r\n    constructor(gridsterItem) {\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n    }\r\n    destroy() {\r\n        this.gridster = this.gridsterItem = this.swapedItem = null;\r\n    }\r\n    swapItems() {\r\n        if (this.gridster.$options.swap) {\r\n            this.checkSwapBack();\r\n            this.checkSwap(this.gridsterItem);\r\n        }\r\n    }\r\n    checkSwapBack() {\r\n        if (this.swapedItem) {\r\n            const x = this.swapedItem.$item.x;\r\n            const y = this.swapedItem.$item.y;\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\r\n                this.swapedItem.$item.x = x;\r\n                this.swapedItem.$item.y = y;\r\n            }\r\n            else {\r\n                this.swapedItem.setSize();\r\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n                this.swapedItem = undefined;\r\n            }\r\n        }\r\n    }\r\n    restoreSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            this.swapedItem.setSize();\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    setSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    checkSwap(pushedBy) {\r\n        let gridsterItemCollision;\r\n        if (this.gridster.$options.swapWhileDragging) {\r\n            gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\r\n        }\r\n        else {\r\n            gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\r\n        }\r\n        if (gridsterItemCollision &&\r\n            gridsterItemCollision !== true &&\r\n            gridsterItemCollision.canBeDragged()) {\r\n            const gridsterItemCollide = gridsterItemCollision;\r\n            const copyCollisionX = gridsterItemCollide.$item.x;\r\n            const copyCollisionY = gridsterItemCollide.$item.y;\r\n            const copyX = pushedBy.$item.x;\r\n            const copyY = pushedBy.$item.y;\r\n            const diffX = copyX - copyCollisionX;\r\n            const diffY = copyY - copyCollisionY;\r\n            gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\r\n            gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\r\n            pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\r\n            pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\r\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) ||\r\n                this.gridster.checkCollision(pushedBy.$item)) {\r\n                pushedBy.$item.x = copyX;\r\n                pushedBy.$item.y = copyY;\r\n                gridsterItemCollide.$item.x = copyCollisionX;\r\n                gridsterItemCollide.$item.y = copyCollisionY;\r\n            }\r\n            else {\r\n                gridsterItemCollide.setSize();\r\n                this.swapedItem = gridsterItemCollide;\r\n                if (this.gridster.$options.swapWhileDragging) {\r\n                    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n                    this.setSwapItem();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\nconst GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS = 'gridster-item-resizable-handler';\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[\"UP\"] = \"UP\";\r\n    Direction[\"DOWN\"] = \"DOWN\";\r\n    Direction[\"LEFT\"] = \"LEFT\";\r\n    Direction[\"RIGHT\"] = \"RIGHT\";\r\n})(Direction || (Direction = {}));\r\nclass GridsterDraggable {\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        this.collision = false;\r\n        this.dragMove = (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            GridsterUtils.checkTouchEvent(e);\r\n            // get the directions of the mouse event\r\n            let directions = this.getDirections(e);\r\n            if (this.gridster.options.enableBoundaryControl) {\r\n                // prevent moving up at the top of gridster\r\n                if (directions.includes(Direction.UP) &&\r\n                    this.gridsterItem.el.getBoundingClientRect().top <=\r\n                        this.gridster.el.getBoundingClientRect().top + this.margin) {\r\n                    directions = directions.filter(direction => direction != Direction.UP);\r\n                    e = new MouseEvent(e.type, {\r\n                        clientX: e.clientX,\r\n                        clientY: this.lastMouse.clientY\r\n                    });\r\n                }\r\n                // prevent moving left at the leftmost column of gridster\r\n                if (directions.includes(Direction.LEFT) &&\r\n                    this.gridsterItem.el.getBoundingClientRect().left <=\r\n                        this.gridster.el.getBoundingClientRect().left + this.margin) {\r\n                    directions = directions.filter(direction => direction != Direction.LEFT);\r\n                    e = new MouseEvent(e.type, {\r\n                        clientX: this.lastMouse.clientX,\r\n                        clientY: e.clientY\r\n                    });\r\n                }\r\n                // prevent moving right at the rightmost column of gridster\r\n                if (directions.includes(Direction.RIGHT) &&\r\n                    this.gridsterItem.el.getBoundingClientRect().right >=\r\n                        this.gridster.el.getBoundingClientRect().right - this.margin) {\r\n                    directions = directions.filter(direction => direction != Direction.RIGHT);\r\n                    e = new MouseEvent(e.type, {\r\n                        clientX: this.lastMouse.clientX,\r\n                        clientY: e.clientY\r\n                    });\r\n                }\r\n                // prevent moving down at the bottom of gridster\r\n                if (directions.includes(Direction.DOWN) &&\r\n                    this.gridsterItem.el.getBoundingClientRect().bottom >=\r\n                        this.gridster.el.getBoundingClientRect().bottom - this.margin) {\r\n                    directions = directions.filter(direction => direction != Direction.DOWN);\r\n                    e = new MouseEvent(e.type, {\r\n                        clientX: e.clientX,\r\n                        clientY: this.lastMouse.clientY\r\n                    });\r\n                }\r\n            }\r\n            // do not change item location when there is no direction to go\r\n            if (directions.length) {\r\n                this.offsetLeft =\r\n                    this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n                this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n                scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition);\r\n                this.calculateItemPositionFromMousePosition(e);\r\n            }\r\n        };\r\n        this.calculateItemPositionFromMousePosition = (e) => {\r\n            if (this.gridster.options.scale) {\r\n                this.calculateItemPositionWithScale(e, this.gridster.options.scale);\r\n            }\r\n            else {\r\n                this.calculateItemPositionWithoutScale(e);\r\n            }\r\n            this.calculateItemPosition();\r\n            this.lastMouse.clientX = e.clientX;\r\n            this.lastMouse.clientY = e.clientY;\r\n            this.zone.run(() => {\r\n                this.gridster.updateGrid();\r\n            });\r\n        };\r\n        this.dragStop = (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            cancelScroll();\r\n            this.cancelOnBlur();\r\n            this.mousemove();\r\n            this.mouseup();\r\n            this.mouseleave();\r\n            this.touchmove();\r\n            this.touchend();\r\n            this.touchcancel();\r\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\r\n            this.gridster.dragInProgress = false;\r\n            this.gridster.updateGrid();\r\n            this.path = [];\r\n            if (this.gridster.options.draggable &&\r\n                this.gridster.options.draggable.stop) {\r\n                Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag, this.cancelDrag);\r\n            }\r\n            else {\r\n                this.makeDrag();\r\n            }\r\n            setTimeout(() => {\r\n                if (this.gridster) {\r\n                    this.gridster.movingItem = null;\r\n                    this.gridster.previewStyle(true);\r\n                }\r\n            });\r\n        };\r\n        this.cancelDrag = () => {\r\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n            this.gridsterItem.setSize();\r\n            if (this.push) {\r\n                this.push.restoreItems();\r\n            }\r\n            if (this.swap) {\r\n                this.swap.restoreSwapItem();\r\n            }\r\n            if (this.push) {\r\n                this.push.destroy();\r\n                this.push = null;\r\n            }\r\n            if (this.swap) {\r\n                this.swap.destroy();\r\n                this.swap = null;\r\n            }\r\n        };\r\n        this.makeDrag = () => {\r\n            if (this.gridster.$options.draggable.dropOverItems &&\r\n                this.gridster.options.draggable &&\r\n                this.gridster.options.draggable.dropOverItemsCallback &&\r\n                this.collision &&\r\n                this.collision !== true &&\r\n                this.collision.$item) {\r\n                this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\r\n            }\r\n            this.collision = false;\r\n            this.gridsterItem.setSize();\r\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n            if (this.push) {\r\n                this.push.setPushedItems();\r\n            }\r\n            if (this.swap) {\r\n                this.swap.setSwapItem();\r\n            }\r\n            if (this.push) {\r\n                this.push.destroy();\r\n                this.push = null;\r\n            }\r\n            if (this.swap) {\r\n                this.swap.destroy();\r\n                this.swap = null;\r\n            }\r\n        };\r\n        this.dragStartDelay = (e) => {\r\n            const target = e.target;\r\n            if (target.classList.contains(GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS)) {\r\n                return;\r\n            }\r\n            if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\r\n                return;\r\n            }\r\n            GridsterUtils.checkTouchEvent(e);\r\n            if (!this.gridster.$options.draggable.delayStart) {\r\n                this.dragStart(e);\r\n                return;\r\n            }\r\n            const timeout = setTimeout(() => {\r\n                this.dragStart(e);\r\n                cancelDrag();\r\n            }, this.gridster.$options.draggable.delayStart);\r\n            const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n            const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\r\n            const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n            const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n            const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n            const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n            function cancelMove(eventMove) {\r\n                GridsterUtils.checkTouchEvent(eventMove);\r\n                if (Math.abs(eventMove.clientX - e.clientX) > 9 ||\r\n                    Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                    cancelDrag();\r\n                }\r\n            }\r\n            function cancelDrag() {\r\n                clearTimeout(timeout);\r\n                cancelOnBlur();\r\n                cancelMouse();\r\n                cancelMouseLeave();\r\n                cancelTouchMove();\r\n                cancelTouchEnd();\r\n                cancelTouchCancel();\r\n            }\r\n        };\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.path = [];\r\n    }\r\n    destroy() {\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle(true);\r\n        }\r\n        this.gridsterItem = this.gridster = this.collision = null;\r\n        if (this.mousedown) {\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    dragStart(e) {\r\n        if (e.which && e.which !== 1) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.draggable &&\r\n            this.gridster.options.draggable.start) {\r\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\r\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.left = this.gridsterItem.left - this.margin;\r\n        this.top = this.gridsterItem.top - this.margin;\r\n        this.originalClientX = e.clientX;\r\n        this.originalClientY = e.clientY;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.diffLeft =\r\n                e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\r\n        }\r\n        else {\r\n            this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\r\n        }\r\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle(true);\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.swap = new GridsterSwap(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        this.path.push({\r\n            x: this.gridsterItem.item.x || 0,\r\n            y: this.gridsterItem.item.y || 0\r\n        });\r\n    }\r\n    calculateItemPositionWithScale(e, scale) {\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.left =\r\n                this.gridster.el.scrollWidth -\r\n                    this.originalClientX +\r\n                    (e.clientX - this.originalClientX) / scale +\r\n                    this.diffLeft;\r\n        }\r\n        else {\r\n            this.left =\r\n                this.originalClientX +\r\n                    (e.clientX - this.originalClientX) / scale +\r\n                    this.offsetLeft -\r\n                    this.diffLeft;\r\n        }\r\n        this.top =\r\n            this.originalClientY +\r\n                (e.clientY - this.originalClientY) / scale +\r\n                this.offsetTop -\r\n                this.diffTop;\r\n    }\r\n    calculateItemPositionWithoutScale(e) {\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\r\n        }\r\n        else {\r\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\r\n        }\r\n        this.top = e.clientY + this.offsetTop - this.diffTop;\r\n    }\r\n    calculateItemPosition() {\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\r\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\r\n        this.positionXBackup = this.gridsterItem.$item.x;\r\n        this.positionYBackup = this.gridsterItem.$item.y;\r\n        this.gridsterItem.$item.x = this.positionX;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.x = this.positionXBackup;\r\n        }\r\n        this.gridsterItem.$item.y = this.positionY;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.y = this.positionYBackup;\r\n        }\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\r\n        if (this.positionXBackup !== this.gridsterItem.$item.x ||\r\n            this.positionYBackup !== this.gridsterItem.$item.y) {\r\n            const lastPosition = this.path[this.path.length - 1];\r\n            let direction = '';\r\n            if (lastPosition.x < this.gridsterItem.$item.x) {\r\n                direction = this.push.fromWest;\r\n            }\r\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\r\n                direction = this.push.fromEast;\r\n            }\r\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\r\n                direction = this.push.fromNorth;\r\n            }\r\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\r\n                direction = this.push.fromSouth;\r\n            }\r\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\r\n            this.swap.swapItems();\r\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\r\n            if (this.collision) {\r\n                this.gridsterItem.$item.x = this.positionXBackup;\r\n                this.gridsterItem.$item.y = this.positionYBackup;\r\n                if (this.gridster.$options.draggable.dropOverItems &&\r\n                    this.collision !== true &&\r\n                    this.collision.$item) {\r\n                    this.gridster.movingItem = null;\r\n                }\r\n            }\r\n            else {\r\n                this.path.push({\r\n                    x: this.gridsterItem.$item.x,\r\n                    y: this.gridsterItem.$item.y\r\n                });\r\n            }\r\n            this.push.checkPushBack();\r\n        }\r\n        this.gridster.previewStyle(true);\r\n    }\r\n    toggle() {\r\n        const enableDrag = this.gridsterItem.canBeDragged();\r\n        if (!this.enabled && enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartDelay);\r\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartDelay);\r\n        }\r\n        else if (this.enabled && !enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the list of directions for given mouse event\r\n     * @param e Mouse event\r\n     * */\r\n    getDirections(e) {\r\n        const directions = [];\r\n        if (this.lastMouse.clientY > e.clientY) {\r\n            directions.push(Direction.UP);\r\n        }\r\n        if (this.lastMouse.clientY < e.clientY) {\r\n            directions.push(Direction.DOWN);\r\n        }\r\n        if (this.lastMouse.clientX < e.clientX) {\r\n            directions.push(Direction.RIGHT);\r\n        }\r\n        if (this.lastMouse.clientX > e.clientX) {\r\n            directions.push(Direction.LEFT);\r\n        }\r\n        return directions;\r\n    }\r\n}\n\nclass GridsterPushResize {\r\n    constructor(gridsterItem) {\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: this.tryWest,\r\n            fromWest: this.tryEast,\r\n            fromNorth: this.trySouth,\r\n            fromSouth: this.tryNorth\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    destroy() {\r\n        this.gridster = this.gridsterItem = null;\r\n    }\r\n    pushItems(direction) {\r\n        if (this.gridster.$options.pushResizeItems) {\r\n            return this.push(this.gridsterItem, direction);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    restoreItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\r\n            pushedItem.$item.row = pushedItem.item.row || 1;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    setPushedItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    checkPushBack() {\r\n        let i = this.pushedItems.length - 1;\r\n        let change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    push(gridsterItem, direction) {\r\n        const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\r\n        if (gridsterItemCollision &&\r\n            gridsterItemCollision !== true &&\r\n            gridsterItemCollision !== this.gridsterItem &&\r\n            gridsterItemCollision.canBeResized()) {\r\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (gridsterItemCollision === false) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpY = gridsterItemCollide.$item.y;\r\n        const backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.y =\r\n            gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        gridsterItemCollide.$item.rows =\r\n            backUpRows + backUpY - gridsterItemCollide.$item.y;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\r\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.y = backUpY;\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.rows =\r\n            gridsterItem.$item.y - gridsterItemCollide.$item.y;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\r\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpX = gridsterItemCollide.$item.x;\r\n        const backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.x =\r\n            gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        gridsterItemCollide.$item.cols =\r\n            backUpCols + backUpX - gridsterItemCollide.$item.x;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\r\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.x = backUpX;\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.cols =\r\n            gridsterItem.$item.x - gridsterItemCollide.$item.x;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\r\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([\r\n                {\r\n                    x: gridsterItem.item.x || 0,\r\n                    y: gridsterItem.item.y || 0,\r\n                    cols: gridsterItem.item.cols || 0,\r\n                    rows: gridsterItem.item.rows || 0\r\n                },\r\n                {\r\n                    x: gridsterItem.$item.x,\r\n                    y: gridsterItem.$item.y,\r\n                    cols: gridsterItem.$item.cols,\r\n                    rows: gridsterItem.$item.rows\r\n                }\r\n            ]);\r\n        }\r\n        else {\r\n            const i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({\r\n                x: gridsterItem.$item.x,\r\n                y: gridsterItem.$item.y,\r\n                cols: gridsterItem.$item.cols,\r\n                rows: gridsterItem.$item.rows\r\n            });\r\n        }\r\n    }\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    checkPushedItem(pushedItem, i) {\r\n        const path = this.pushedItemsPath[i];\r\n        let j = path.length - 2;\r\n        let lastPosition;\r\n        let x;\r\n        let y;\r\n        let cols;\r\n        let rows;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            cols = pushedItem.$item.cols;\r\n            rows = pushedItem.$item.rows;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            pushedItem.$item.cols = lastPosition.cols;\r\n            pushedItem.$item.rows = lastPosition.rows;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - 1 - j);\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n                pushedItem.$item.cols = cols;\r\n                pushedItem.$item.rows = rows;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\n\nclass GridsterResizable {\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * The direction function may reference any of the `GridsterResizable` class methods, that are\r\n         * responsible for gridster resize when the `dragmove` event is being handled. E.g. it may reference\r\n         * the `handleNorth` method when the north handle is pressed and moved by a mouse.\r\n         */\r\n        this.directionFunction = null;\r\n        this.dragMove = (e) => {\r\n            if (this.directionFunction === null) {\r\n                throw new Error('The `directionFunction` has not been set before calling `dragMove`.');\r\n            }\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            GridsterUtils.checkTouchEvent(e);\r\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n            scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction, true, this.resizeEventScrollType);\r\n            const scale = this.gridster.options.scale || 1;\r\n            this.directionFunction({\r\n                clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\r\n                clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\r\n            });\r\n            this.lastMouse.clientX = e.clientX;\r\n            this.lastMouse.clientY = e.clientY;\r\n            this.zone.run(() => {\r\n                this.gridster.updateGrid();\r\n            });\r\n        };\r\n        this.dragStop = (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            cancelScroll();\r\n            this.mousemove();\r\n            this.mouseup();\r\n            this.mouseleave();\r\n            this.cancelOnBlur();\r\n            this.touchmove();\r\n            this.touchend();\r\n            this.touchcancel();\r\n            this.gridster.dragInProgress = false;\r\n            this.gridster.updateGrid();\r\n            if (this.gridster.options.resizable &&\r\n                this.gridster.options.resizable.stop) {\r\n                Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize, this.cancelResize);\r\n            }\r\n            else {\r\n                this.makeResize();\r\n            }\r\n            setTimeout(() => {\r\n                this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n                if (this.gridster) {\r\n                    this.gridster.movingItem = null;\r\n                    this.gridster.previewStyle();\r\n                }\r\n            });\r\n        };\r\n        this.cancelResize = () => {\r\n            this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\r\n            this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\r\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n            this.gridsterItem.setSize();\r\n            this.push.restoreItems();\r\n            this.pushResize.restoreItems();\r\n            this.push.destroy();\r\n            this.push = null;\r\n            this.pushResize.destroy();\r\n            this.pushResize = null;\r\n        };\r\n        this.makeResize = () => {\r\n            this.gridsterItem.setSize();\r\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n            this.push.setPushedItems();\r\n            this.pushResize.setPushedItems();\r\n            this.push.destroy();\r\n            this.push = null;\r\n            this.pushResize.destroy();\r\n            this.pushResize = null;\r\n        };\r\n        this.handleNorth = (e) => {\r\n            this.top = e.clientY + this.offsetTop - this.diffTop;\r\n            this.height = this.bottom - this.top;\r\n            if (this.minHeight > this.height) {\r\n                this.height = this.minHeight;\r\n                this.top = this.bottom - this.minHeight;\r\n            }\r\n            this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\r\n            if (this.gridsterItem.$item.y !== this.newPosition) {\r\n                this.itemBackup[1] = this.gridsterItem.$item.y;\r\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n                this.gridsterItem.$item.rows +=\r\n                    this.gridsterItem.$item.y - this.newPosition;\r\n                this.gridsterItem.$item.y = this.newPosition;\r\n                this.pushResize.pushItems(this.pushResize.fromSouth);\r\n                this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\r\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                    this.gridsterItem.$item.y = this.itemBackup[1];\r\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                    this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\r\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) -\r\n                        this.margin);\r\n                    return;\r\n                }\r\n                else {\r\n                    this.gridster.previewStyle();\r\n                }\r\n                this.pushResize.checkPushBack();\r\n                this.push.checkPushBack();\r\n            }\r\n            this.setItemTop(this.top);\r\n            this.setItemHeight(this.height);\r\n        };\r\n        this.handleWest = (e) => {\r\n            const clientX = this.gridster.$options.dirType === DirTypes.RTL\r\n                ? this.originalClientX + (this.originalClientX - e.clientX)\r\n                : e.clientX;\r\n            this.left = clientX + this.offsetLeft - this.diffLeft;\r\n            this.width = this.right - this.left;\r\n            if (this.minWidth > this.width) {\r\n                this.width = this.minWidth;\r\n                this.left = this.right - this.minWidth;\r\n            }\r\n            this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\r\n            if (this.gridsterItem.$item.x !== this.newPosition) {\r\n                this.itemBackup[0] = this.gridsterItem.$item.x;\r\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n                this.gridsterItem.$item.cols +=\r\n                    this.gridsterItem.$item.x - this.newPosition;\r\n                this.gridsterItem.$item.x = this.newPosition;\r\n                this.pushResize.pushItems(this.pushResize.fromEast);\r\n                this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\r\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                    this.gridsterItem.$item.x = this.itemBackup[0];\r\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                    this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\r\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) -\r\n                        this.margin);\r\n                    return;\r\n                }\r\n                else {\r\n                    this.gridster.previewStyle();\r\n                }\r\n                this.pushResize.checkPushBack();\r\n                this.push.checkPushBack();\r\n            }\r\n            this.setItemLeft(this.left);\r\n            this.setItemWidth(this.width);\r\n        };\r\n        this.handleSouth = (e) => {\r\n            this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\r\n            if (this.minHeight > this.height) {\r\n                this.height = this.minHeight;\r\n            }\r\n            this.bottom = this.top + this.height;\r\n            this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\r\n            if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !==\r\n                this.newPosition) {\r\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n                this.gridsterItem.$item.rows =\r\n                    this.newPosition - this.gridsterItem.$item.y;\r\n                this.pushResize.pushItems(this.pushResize.fromNorth);\r\n                this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\r\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) -\r\n                        this.margin);\r\n                    return;\r\n                }\r\n                else {\r\n                    this.gridster.previewStyle();\r\n                }\r\n                this.pushResize.checkPushBack();\r\n                this.push.checkPushBack();\r\n            }\r\n            this.setItemHeight(this.height);\r\n        };\r\n        this.handleEast = (e) => {\r\n            const clientX = this.gridster.$options.dirType === DirTypes.RTL\r\n                ? this.originalClientX + (this.originalClientX - e.clientX)\r\n                : e.clientX;\r\n            this.width = clientX + this.offsetLeft - this.diffRight - this.left;\r\n            if (this.minWidth > this.width) {\r\n                this.width = this.minWidth;\r\n            }\r\n            this.right = this.left + this.width;\r\n            this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\r\n            if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !==\r\n                this.newPosition) {\r\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n                this.gridsterItem.$item.cols =\r\n                    this.newPosition - this.gridsterItem.$item.x;\r\n                this.pushResize.pushItems(this.pushResize.fromWest);\r\n                this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\r\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) -\r\n                        this.margin);\r\n                    return;\r\n                }\r\n                else {\r\n                    this.gridster.previewStyle();\r\n                }\r\n                this.pushResize.checkPushBack();\r\n                this.push.checkPushBack();\r\n            }\r\n            this.setItemWidth(this.width);\r\n        };\r\n        this.handleNorthWest = (e) => {\r\n            this.handleNorth(e);\r\n            this.handleWest(e);\r\n        };\r\n        this.handleNorthEast = (e) => {\r\n            this.handleNorth(e);\r\n            this.handleEast(e);\r\n        };\r\n        this.handleSouthWest = (e) => {\r\n            this.handleSouth(e);\r\n            this.handleWest(e);\r\n        };\r\n        this.handleSouthEast = (e) => {\r\n            this.handleSouth(e);\r\n            this.handleEast(e);\r\n        };\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.itemBackup = [0, 0, 0, 0];\r\n        this.resizeEventScrollType = {\r\n            west: false,\r\n            east: false,\r\n            north: false,\r\n            south: false\r\n        };\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        (_a = this.gridster) === null || _a === void 0 ? void 0 : _a.previewStyle();\r\n        this.gridster = this.gridsterItem = null;\r\n    }\r\n    dragStart(e) {\r\n        if (e.which && e.which !== 1) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.resizable &&\r\n            this.gridster.options.resizable.start) {\r\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\r\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.left = this.gridsterItem.left;\r\n        this.top = this.gridsterItem.top;\r\n        this.originalClientX = e.clientX;\r\n        this.originalClientY = e.clientY;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\r\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\r\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\r\n        this.diffTop = e.clientY + this.offsetTop - this.top;\r\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\r\n        this.minHeight =\r\n            this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows ||\r\n                this.gridster.$options.minItemRows) - this.margin;\r\n        this.minWidth =\r\n            this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols ||\r\n                this.gridster.$options.minItemCols) - this.margin;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle();\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        const { classList } = e.target;\r\n        if (classList.contains('handle-n')) {\r\n            this.resizeEventScrollType.north = true;\r\n            this.directionFunction = this.handleNorth;\r\n        }\r\n        else if (classList.contains('handle-w')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleEast;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleWest;\r\n            }\r\n        }\r\n        else if (classList.contains('handle-s')) {\r\n            this.resizeEventScrollType.south = true;\r\n            this.directionFunction = this.handleSouth;\r\n        }\r\n        else if (classList.contains('handle-e')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleWest;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleEast;\r\n            }\r\n        }\r\n        else if (classList.contains('handle-nw')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.north = true;\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleNorthEast;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.north = true;\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleNorthWest;\r\n            }\r\n        }\r\n        else if (classList.contains('handle-ne')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.north = true;\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleNorthWest;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.north = true;\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleNorthEast;\r\n            }\r\n        }\r\n        else if (classList.contains('handle-sw')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.south = true;\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleSouthEast;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.south = true;\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleSouthWest;\r\n            }\r\n        }\r\n        else if (classList.contains('handle-se')) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.south = true;\r\n                this.resizeEventScrollType.west = true;\r\n                this.directionFunction = this.handleSouthWest;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.south = true;\r\n                this.resizeEventScrollType.east = true;\r\n                this.directionFunction = this.handleSouthEast;\r\n            }\r\n        }\r\n    }\r\n    toggle() {\r\n        this.resizeEnabled = this.gridsterItem.canBeResized();\r\n    }\r\n    dragStartDelay(e) {\r\n        GridsterUtils.checkTouchEvent(e);\r\n        if (!this.gridster.$options.resizable.delayStart) {\r\n            this.dragStart(e);\r\n            return;\r\n        }\r\n        const timeout = setTimeout(() => {\r\n            this.dragStart(e);\r\n            cancelDrag();\r\n        }, this.gridster.$options.resizable.delayStart);\r\n        const { cancelMouse, cancelMouseLeave, cancelOnBlur, cancelTouchMove, cancelTouchEnd, cancelTouchCancel } = this.zone.runOutsideAngular(() => {\r\n            // Note: all of these events are being added within the `<root>` zone since they all\r\n            // don't do any view updates and don't require Angular running change detection.\r\n            // All event listeners call `cancelDrag` once the event is dispatched, the `cancelDrag`\r\n            // is responsible only for removing event listeners.\r\n            const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n            const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\r\n            const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n            const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n            const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n            const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n            return {\r\n                cancelMouse,\r\n                cancelMouseLeave,\r\n                cancelOnBlur,\r\n                cancelTouchMove,\r\n                cancelTouchEnd,\r\n                cancelTouchCancel\r\n            };\r\n        });\r\n        function cancelMove(eventMove) {\r\n            GridsterUtils.checkTouchEvent(eventMove);\r\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 ||\r\n                Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                cancelDrag();\r\n            }\r\n        }\r\n        function cancelDrag() {\r\n            clearTimeout(timeout);\r\n            cancelOnBlur();\r\n            cancelMouse();\r\n            cancelMouseLeave();\r\n            cancelTouchMove();\r\n            cancelTouchEnd();\r\n            cancelTouchCancel();\r\n        }\r\n    }\r\n    setItemTop(top) {\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\r\n    }\r\n    setItemLeft(left) {\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\r\n    }\r\n    setItemHeight(height) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\r\n    }\r\n    setItemWidth(width) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\r\n    }\r\n}\n\nclass GridsterItemComponent {\r\n    constructor(el, gridster, renderer, zone) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.itemInit = new EventEmitter();\r\n        this.itemChange = new EventEmitter();\r\n        this.itemResize = new EventEmitter();\r\n        this.el = el.nativeElement;\r\n        this.$item = {\r\n            cols: -1,\r\n            rows: -1,\r\n            x: -1,\r\n            y: -1\r\n        };\r\n        this.gridster = gridster;\r\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\r\n        this.resize = new GridsterResizable(this, gridster, this.zone);\r\n    }\r\n    get zIndex() {\r\n        return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\r\n    }\r\n    ngOnInit() {\r\n        this.gridster.addItem(this);\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.item) {\r\n            this.updateOptions();\r\n            if (!this.init) {\r\n                this.gridster.calculateLayout$.next();\r\n            }\r\n        }\r\n        if (changes.item && changes.item.previousValue) {\r\n            this.setSize();\r\n        }\r\n    }\r\n    updateOptions() {\r\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\r\n            cols: undefined,\r\n            rows: undefined,\r\n            x: undefined,\r\n            y: undefined,\r\n            layerIndex: undefined,\r\n            dragEnabled: undefined,\r\n            resizeEnabled: undefined,\r\n            compactEnabled: undefined,\r\n            maxItemRows: undefined,\r\n            minItemRows: undefined,\r\n            maxItemCols: undefined,\r\n            minItemCols: undefined,\r\n            maxItemArea: undefined,\r\n            minItemArea: undefined\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.gridster.removeItem(this);\r\n        this.drag.destroy();\r\n        this.resize.destroy();\r\n        this.gridster = this.drag = this.resize = null;\r\n    }\r\n    setSize() {\r\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\r\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\r\n        this.updateItemSize();\r\n    }\r\n    updateItemSize() {\r\n        const top = this.$item.y * this.gridster.curRowHeight;\r\n        const left = this.$item.x * this.gridster.curColWidth;\r\n        const width = this.$item.cols * this.gridster.curColWidth -\r\n            this.gridster.$options.margin;\r\n        const height = this.$item.rows * this.gridster.curRowHeight -\r\n            this.gridster.$options.margin;\r\n        this.top = top;\r\n        this.left = left;\r\n        if (!this.init && width > 0 && height > 0) {\r\n            this.init = true;\r\n            if (this.item.initCallback) {\r\n                this.item.initCallback(this.item, this);\r\n            }\r\n            if (this.gridster.options.itemInitCallback) {\r\n                this.gridster.options.itemInitCallback(this.item, this);\r\n            }\r\n            this.itemInit.next({ item: this.item, itemComponent: this });\r\n            if (this.gridster.$options.scrollToNewItems) {\r\n                this.el.scrollIntoView(false);\r\n            }\r\n        }\r\n        if (width !== this.width || height !== this.height) {\r\n            this.width = width;\r\n            this.height = height;\r\n            if (this.gridster.options.itemResizeCallback) {\r\n                this.gridster.options.itemResizeCallback(this.item, this);\r\n            }\r\n            this.itemResize.next({ item: this.item, itemComponent: this });\r\n        }\r\n    }\r\n    itemChanged() {\r\n        if (this.gridster.options.itemChangeCallback) {\r\n            this.gridster.options.itemChangeCallback(this.item, this);\r\n        }\r\n        this.itemChange.next({ item: this.item, itemComponent: this });\r\n    }\r\n    checkItemChanges(newValue, oldValue) {\r\n        if (newValue.rows === oldValue.rows &&\r\n            newValue.cols === oldValue.cols &&\r\n            newValue.x === oldValue.x &&\r\n            newValue.y === oldValue.y) {\r\n            return;\r\n        }\r\n        if (this.gridster.checkCollision(this.$item)) {\r\n            this.$item.x = oldValue.x || 0;\r\n            this.$item.y = oldValue.y || 0;\r\n            this.$item.cols = oldValue.cols || 1;\r\n            this.$item.rows = oldValue.rows || 1;\r\n            this.setSize();\r\n        }\r\n        else {\r\n            this.item.cols = this.$item.cols;\r\n            this.item.rows = this.$item.rows;\r\n            this.item.x = this.$item.x;\r\n            this.item.y = this.$item.y;\r\n            this.gridster.calculateLayout$.next();\r\n            this.itemChanged();\r\n        }\r\n    }\r\n    canBeDragged() {\r\n        const gridDragEnabled = this.gridster.$options.draggable.enabled;\r\n        const itemDragEnabled = this.$item.dragEnabled === undefined\r\n            ? gridDragEnabled\r\n            : this.$item.dragEnabled;\r\n        return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\r\n    }\r\n    canBeResized() {\r\n        const gridResizable = this.gridster.$options.resizable.enabled;\r\n        const itemResizable = this.$item.resizeEnabled === undefined\r\n            ? gridResizable\r\n            : this.$item.resizeEnabled;\r\n        return !this.gridster.mobile && gridResizable && itemResizable;\r\n    }\r\n    bringToFront(offset) {\r\n        if (offset && offset <= 0) {\r\n            return;\r\n        }\r\n        const layerIndex = this.getLayerIndex();\r\n        const topIndex = this.gridster.$options.maxLayerIndex;\r\n        if (layerIndex < topIndex) {\r\n            const targetIndex = offset ? layerIndex + offset : topIndex;\r\n            this.item.layerIndex = this.$item.layerIndex =\r\n                targetIndex > topIndex ? topIndex : targetIndex;\r\n        }\r\n    }\r\n    sendToBack(offset) {\r\n        if (offset && offset <= 0) {\r\n            return;\r\n        }\r\n        const layerIndex = this.getLayerIndex();\r\n        if (layerIndex > 0) {\r\n            const targetIndex = offset ? layerIndex - offset : 0;\r\n            this.item.layerIndex = this.$item.layerIndex =\r\n                targetIndex < 0 ? 0 : targetIndex;\r\n        }\r\n    }\r\n    getLayerIndex() {\r\n        if (this.item.layerIndex !== undefined) {\r\n            return this.item.layerIndex;\r\n        }\r\n        if (this.gridster.$options.defaultLayerIndex !== undefined) {\r\n            return this.gridster.$options.defaultLayerIndex;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nGridsterItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterItemComponent, deps: [{ token: ElementRef }, { token: GridsterComponent }, { token: Renderer2 }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: GridsterItemComponent, selector: \"gridster-item\", inputs: { item: \"item\" }, outputs: { itemInit: \"itemInit\", itemChange: \"itemChange\", itemResize: \"itemResize\" }, host: { properties: { \"style.z-index\": \"this.zIndex\" } }, usesOnChanges: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\", styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterItemComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'gridster-item', encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\", styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef, decorators: [{\r\n                        type: Inject,\r\n                        args: [ElementRef]\r\n                    }] }, { type: GridsterComponent }, { type: i0.Renderer2, decorators: [{\r\n                        type: Inject,\r\n                        args: [Renderer2]\r\n                    }] }, { type: i0.NgZone, decorators: [{\r\n                        type: Inject,\r\n                        args: [NgZone]\r\n                    }] }];\r\n    }, propDecorators: { item: [{\r\n                type: Input\r\n            }], itemInit: [{\r\n                type: Output\r\n            }], itemChange: [{\r\n                type: Output\r\n            }], itemResize: [{\r\n                type: Output\r\n            }], zIndex: [{\r\n                type: HostBinding,\r\n                args: ['style.z-index']\r\n            }] } });\n\nclass GridsterItemComponentInterface {\r\n}\n\nclass GridsterComponentInterface {\r\n}\n\nclass GridsterModule {\r\n}\r\nGridsterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nGridsterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterModule, declarations: [GridsterComponent,\r\n        GridsterItemComponent,\r\n        GridsterPreviewComponent], imports: [CommonModule], exports: [GridsterComponent, GridsterItemComponent] });\r\nGridsterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterModule, imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: GridsterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        GridsterComponent,\r\n                        GridsterItemComponent,\r\n                        GridsterPreviewComponent\r\n                    ],\r\n                    imports: [CommonModule],\r\n                    exports: [GridsterComponent, GridsterItemComponent]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of gridster\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };\n"]},"metadata":{},"sourceType":"module"}